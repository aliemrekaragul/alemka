{
  "hash": "3aefcea22492f9c3c21e4a3c61d1009c",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Exploratory Factor Analysis with Likert Scale Data\"\ndescription: |\n  This post focuses on exploratory factor analysis on likert scale data using the conventional principal axis factoring. It also includes the calculation of ordinal alpha coefficient for the reliability of the scale. The analysis is supported with visuals.\nauthor:\n  - name: Ali Emre Karag√ºl\n    orcid: 0000-0002-5820-8643\n    email: aliemrekaragul@gmail.com\n    affiliations:\n      - name: TOBB ETU- University of Economics & Technology\ndate: 2024-11-18\ncategories: [psychometrics, Dimension Reduction, Explotary Factor Analysis, Principle Axis Factoring, Likert, Polychoric Correlation, scatter plot, scree plot, ggplot2, plotly, psych, dplyr]\nimage: \"image.png\"\noutput:\n    self_contained: false\n    code_folding: false\n---\n\n\n## Introduction\n\nEFA is used to identify a potentially lower number of unobservable factors or constructs that can explain the patterns of correlations within a set of observed variables. This technique is widely used in the development of tests and measurements in psychological, educational, and social sciences research to ensure that the test measures what it's supposed to measure.\n\nIn this post, we will build an EFA model using a Likert scale data obtained from [Open Psychometrics](https://openpsychometrics.org/_rawdata/ \"https://openpsychometrics.org/_rawdata/\"). Follow the link and find the zip file (OSRI44_dev_data.zip) containing data related to Open Sex Role Inventory. This is an interactive personality test measuring masculinity and femininity (or gendered personality traits) modeled on the Bem Sex-Role Inventory.\n\nLikert scale data has multiple categories. Thus, it requires running the EFA with polychoric corelations. We will also utilize principle axis factoring. For the reliability of the scale, we will use ordinal Alpha coefficient suggested by [Zumbo et al. (2007)](https://digitalcommons.wayne.edu/jmasm/vol6/iss1/4/ \"ordinal alpha paper\"). All will be run using R. Unfortunately, software like SPSS do not provide an EFA with polychoric correlations or ordinal alpha coefficient. That's why we have to use languages like R. Another alternative to SPSS in this regard is JASP (which is also built with R in terms of statistics) but it still doesn't provide a way to calculate ordinal alpha.\n\nOnce you download the data, you will see two files in the folder: `codebook.txt` and `data.csv`. The first gives us information about the data, and the later contains the data itself. Move the `data.csv` to your working directory and run the following code to see the structure of the data.\n\n\n::: {.cell code_folding='false'}\n\n```{.r .cell-code  code-fold=\"false\"}\ndata <- read.delim(\"data.csv\")\nstr(data[,40:57]) # run str(data) to see all items. we do not include the first 39 items here\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n'data.frame':\t318573 obs. of  18 variables:\n $ Q40        : int  4 3 4 3 1 3 2 3 2 4 ...\n $ Q41        : int  1 5 2 4 1 1 1 2 4 4 ...\n $ Q42        : int  5 5 1 1 3 5 4 4 5 5 ...\n $ Q43        : int  1 5 3 4 4 1 4 5 3 4 ...\n $ Q44        : int  5 3 3 3 3 5 1 5 4 4 ...\n $ introelapse: int  579 63 24 3 25 524 5 10 4 21 ...\n $ testelapse : int  211 242 265 231 274 189 213 485 236 263 ...\n $ country    : chr  \"US\" \"PE\" \"CH\" \"US\" ...\n $ IPC        : int  1 1 1 1 2 1 2 1 1 1 ...\n $ source     : int  1 0 0 1 1 0 1 0 1 1 ...\n $ engnat     : int  1 1 2 1 1 1 1 1 1 1 ...\n $ age        : int  18 19 18 19 16 20 16 17 32 22 ...\n $ education  : int  2 2 2 3 2 2 2 2 3 3 ...\n $ gender     : int  2 1 2 2 1 1 1 2 3 1 ...\n $ orientation: int  2 2 1 1 1 2 1 0 1 1 ...\n $ race       : int  6 6 1 6 6 6 6 1 1 6 ...\n $ religion   : int  1 1 1 2 2 1 2 2 1 1 ...\n $ hand       : int  1 2 1 1 1 1 1 1 1 1 ...\n```\n\n\n:::\n:::\n\n\n## Preprocessing\n\nThere are 57 variables and the first 44 variables are actual data collected from the questionaire while the rest contains information about the test taker.\n\nTo see the number of test takers, run the following:\n\n\n::: {.cell code_folding='false'}\n\n```{.r .cell-code  code-fold=\"false\"}\nnrow(data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 318573\n```\n\n\n:::\n:::\n\n\nThe number of observations is 318573, which I find a little exhausting for a demo analysis. So I will filter it to reduce the number. These are some of the demographics of the participants:\n\n-   `engnat` \" Is English you native language?\" 1=Yes, 2=No\n\n-   `age` \"What is your age?\", entered as text (ages \\< 13 not recorded)\n\n-   `education` \"How much education have you completed?\" 1=Less than high school, 2=High school, 3=University degree, 4=Graduate degree gender 1=Male, 2=Female, 3=Other\n\n-   `orientation` 1=Heterosexual, 2=Bisexual, 3=Homosexual, 4=Asexual, 5=Other\n\n-   `race` 1=Mixed race, 2=Asian, 3=Black, 4=Native American, 5=Native Australian, 6=White, 7=Other\n\n-   `religion` 1=Atheist/Agnostic, 2=Christian, 3=Muslim, 4=Jewish, 5=Hindu, 6=Buddhist, 7=Other\n\n-   `hand` \"What hand do you use to write with?\" 1=Right, 2=Left, 3=Both\n\n-   `source` how the user found the test, based on HTTP Referer info. 1=google, 2=tumblr, 3=facebook/messenger, 4=reddit, 5=bing, 0=other or unknown.\n\nLet's filter participants whose native language is English, who are right-handed, between ages 18 and 40, and came from Google. Also, only keep the questionaire data as we are not interested in the others from now on. Finally see the summary of the data:\n\n\n::: {.cell code_folding='false'}\n\n```{.r .cell-code  code-fold=\"false\"}\nlibrary(dplyr)\n\ndf_with_demographics <- data %>% \n  filter(engnat == 1) %>% \n  filter(hand == 1) %>% \n  filter(age >= 18 & age <= 30) %>% \n  filter(source == 1)\n\ndf <- df_with_demographics %>% select(1:44)\n\nsummary(df[,1:5]) # run summary(df) to see all items.\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n       Q1              Q2             Q3          Q4              Q5       \n Min.   :0.000   Min.   :0.00   Min.   :0   Min.   :0.000   Min.   :0.000  \n 1st Qu.:1.000   1st Qu.:2.00   1st Qu.:1   1st Qu.:2.000   1st Qu.:1.000  \n Median :1.000   Median :5.00   Median :3   Median :4.000   Median :3.000  \n Mean   :2.023   Mean   :3.76   Mean   :3   Mean   :3.281   Mean   :2.972  \n 3rd Qu.:3.000   3rd Qu.:5.00   3rd Qu.:5   3rd Qu.:5.000   3rd Qu.:4.000  \n Max.   :5.000   Max.   :5.00   Max.   :5   Max.   :5.000   Max.   :5.000  \n```\n\n\n:::\n:::\n\n\n## Model Assumptions\n\n[Some of EFA's assumptions](https://bookdown.org/luguben/EFA_in_R/some-assumptions-of-efa.html \"EFA's assumptions\") are:\n\n-   **Continuous variables:** In our case the data is in likert scale, thus descrete. For such data, IRT based factor reduction is much more appropriate, which we will discuss in a later post. Yet, in practice, researchers use EFA with likert-scale data too if the scale is large enough.\n-   **No outliers:** Outlier detection is another topic for another post. We will disregard this for now.\n-   **No multicollinearity:** This is an assumption we can check simply with a correlation matrix. Basically, EFA expects no observed variables with high correlation. If there are pairs with high correlation, there are suggestions such as dropping one of the pair or merging them into a single variable.\n-   **Sampling Adequecy:** We check if the data is adequate for EFA using Kaiser-Meyer-Olkin (KMO) test for each observed variable as well as the whole model. KMO values above .60 is considered acceptable, while closer to 1 means much better adequecy.\n-   **Sphericity:** An assumption that is usually tested with Bartlett's Test of Sphericity. The assumption here is that the correlation matrix cannot be an identity matrix (also referred as unit matrix). An identity matrix is a diagonal matrix with all its diagonal elements equal to 1 , and zeroes everywhere else. Bartlett's test tests the null hypothesis that the correlation matrix is an identity matrix. If the p-value is less than .05, we reject the null hypothesis and conclude that the correlation matrix is not an identity matrix, which means the data is suitable for EFA.\n\nIn this post, we will test multicollinearity, KMO and Bartlett's Test of Sphericity.\n\n### Multicollinearity\n\nLet's see a correlation heatmap for multicollinearity.\n\n\n::: {.cell code_folding='false'}\n\n```{.r .cell-code  code-fold=\"false\"}\nlibrary(psych)\nlibrary(plotly)\n\npoly_matrix <- polychoric(df)$rho\n\n# Create a long format of the correlation matrix\npoly_long <- as.data.frame(as.table(poly_matrix)) %>%\n  filter(as.numeric(Var1) <= as.numeric(Var2))\n\n# Create the Plotly heatmap\nplot_ly(\n  data = poly_long,\n  x = ~Var2,\n  y = ~Var1,\n  z = ~Freq,\n  text = ~round(Freq, 2), \n  type = \"heatmap\",\n  colorscale = list(\n    c(0, \"blue\"),  # Minimum correlation (-1)\n    c(0.5, \"white\"), \n    c(1, \"red\")  # Maximum correlation (1)\n  ),\n  zmin = -1,  # Set the minimum value of the color bar\n  zmax = 1,   # Set the maximum value of the color bar\n  showscale = TRUE\n) %>%\n  layout(\n    xaxis = list(title = \"Variables\", tickangle = 45),\n    yaxis = list(title = \"Variables\"),\n    title = \"Correlation Matrix\",\n    colorbar = list(title = \"Correlation\", tickvals = c(-1, -0.5, 0, 0.5, 1))  # Customize legend ticks\n  )\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"plotly html-widget html-fill-item\" id=\"htmlwidget-0054e5698dfd2531e1d3\" style=\"width:100%;height:464px;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-0054e5698dfd2531e1d3\">{\"x\":{\"visdat\":{\"18e436cc4bac\":[\"function () \",\"plotlyVisDat\"]},\"cur_data\":\"18e436cc4bac\",\"attrs\":{\"18e436cc4bac\":{\"x\":{},\"y\":{},\"z\":{},\"text\":{},\"colorscale\":[[\"0\",\"blue\"],[\"0.5\",\"white\"],[\"1\",\"red\"]],\"zmin\":-1,\"zmax\":1,\"showscale\":true,\"alpha_stroke\":1,\"sizes\":[10,100],\"spans\":[1,20],\"type\":\"heatmap\"}},\"layout\":{\"margin\":{\"b\":40,\"l\":60,\"t\":25,\"r\":10},\"xaxis\":{\"domain\":[0,1],\"automargin\":true,\"title\":\"Variables\",\"tickangle\":45,\"type\":\"category\",\"categoryorder\":\"array\",\"categoryarray\":[\"Q1\",\"Q2\",\"Q3\",\"Q4\",\"Q5\",\"Q6\",\"Q7\",\"Q8\",\"Q9\",\"Q10\",\"Q11\",\"Q12\",\"Q13\",\"Q14\",\"Q15\",\"Q16\",\"Q17\",\"Q18\",\"Q19\",\"Q20\",\"Q21\",\"Q22\",\"Q23\",\"Q24\",\"Q25\",\"Q26\",\"Q27\",\"Q28\",\"Q29\",\"Q30\",\"Q31\",\"Q32\",\"Q33\",\"Q34\",\"Q35\",\"Q36\",\"Q37\",\"Q38\",\"Q39\",\"Q40\",\"Q41\",\"Q42\",\"Q43\",\"Q44\"]},\"yaxis\":{\"domain\":[0,1],\"automargin\":true,\"title\":\"Variables\",\"type\":\"category\",\"categoryorder\":\"array\",\"categoryarray\":[\"Q1\",\"Q2\",\"Q3\",\"Q4\",\"Q5\",\"Q6\",\"Q7\",\"Q8\",\"Q9\",\"Q10\",\"Q11\",\"Q12\",\"Q13\",\"Q14\",\"Q15\",\"Q16\",\"Q17\",\"Q18\",\"Q19\",\"Q20\",\"Q21\",\"Q22\",\"Q23\",\"Q24\",\"Q25\",\"Q26\",\"Q27\",\"Q28\",\"Q29\",\"Q30\",\"Q31\",\"Q32\",\"Q33\",\"Q34\",\"Q35\",\"Q36\",\"Q37\",\"Q38\",\"Q39\",\"Q40\",\"Q41\",\"Q42\",\"Q43\",\"Q44\"]},\"title\":\"Correlation Matrix\",\"colorbar\":{\"title\":\"Correlation\",\"tickvals\":[-1,-0.5,0,0.5,1]},\"scene\":{\"zaxis\":{\"title\":\"Freq\"}},\"hovermode\":\"closest\",\"showlegend\":false,\"legend\":{\"yanchor\":\"top\",\"y\":0.5}},\"source\":\"A\",\"config\":{\"modeBarButtonsToAdd\":[\"hoverclosest\",\"hovercompare\"],\"showSendToCloud\":false},\"data\":[{\"colorbar\":{\"title\":\"Freq\",\"ticklen\":2,\"len\":0.5,\"lenmode\":\"fraction\",\"y\":1,\"yanchor\":\"top\"},\"colorscale\":[[\"0\",\"blue\"],[\"0.5\",\"white\"],[\"1\",\"red\"]],\"showscale\":true,\"x\":[\"Q1\",\"Q2\",\"Q2\",\"Q3\",\"Q3\",\"Q3\",\"Q4\",\"Q4\",\"Q4\",\"Q4\",\"Q5\",\"Q5\",\"Q5\",\"Q5\",\"Q5\",\"Q6\",\"Q6\",\"Q6\",\"Q6\",\"Q6\",\"Q6\",\"Q7\",\"Q7\",\"Q7\",\"Q7\",\"Q7\",\"Q7\",\"Q7\",\"Q8\",\"Q8\",\"Q8\",\"Q8\",\"Q8\",\"Q8\",\"Q8\",\"Q8\",\"Q9\",\"Q9\",\"Q9\",\"Q9\",\"Q9\",\"Q9\",\"Q9\",\"Q9\",\"Q9\",\"Q10\",\"Q10\",\"Q10\",\"Q10\",\"Q10\",\"Q10\",\"Q10\",\"Q10\",\"Q10\",\"Q10\",\"Q11\",\"Q11\",\"Q11\",\"Q11\",\"Q11\",\"Q11\",\"Q11\",\"Q11\",\"Q11\",\"Q11\",\"Q11\",\"Q12\",\"Q12\",\"Q12\",\"Q12\",\"Q12\",\"Q12\",\"Q12\",\"Q12\",\"Q12\",\"Q12\",\"Q12\",\"Q12\",\"Q13\",\"Q13\",\"Q13\",\"Q13\",\"Q13\",\"Q13\",\"Q13\",\"Q13\",\"Q13\",\"Q13\",\"Q13\",\"Q13\",\"Q13\",\"Q14\",\"Q14\",\"Q14\",\"Q14\",\"Q14\",\"Q14\",\"Q14\",\"Q14\",\"Q14\",\"Q14\",\"Q14\",\"Q14\",\"Q14\",\"Q14\",\"Q15\",\"Q15\",\"Q15\",\"Q15\",\"Q15\",\"Q15\",\"Q15\",\"Q15\",\"Q15\",\"Q15\",\"Q15\",\"Q15\",\"Q15\",\"Q15\",\"Q15\",\"Q16\",\"Q16\",\"Q16\",\"Q16\",\"Q16\",\"Q16\",\"Q16\",\"Q16\",\"Q16\",\"Q16\",\"Q16\",\"Q16\",\"Q16\",\"Q16\",\"Q16\",\"Q16\",\"Q17\",\"Q17\",\"Q17\",\"Q17\",\"Q17\",\"Q17\",\"Q17\",\"Q17\",\"Q17\",\"Q17\",\"Q17\",\"Q17\",\"Q17\",\"Q17\",\"Q17\",\"Q17\",\"Q17\",\"Q18\",\"Q18\",\"Q18\",\"Q18\",\"Q18\",\"Q18\",\"Q18\",\"Q18\",\"Q18\",\"Q18\",\"Q18\",\"Q18\",\"Q18\",\"Q18\",\"Q18\",\"Q18\",\"Q18\",\"Q18\",\"Q19\",\"Q19\",\"Q19\",\"Q19\",\"Q19\",\"Q19\",\"Q19\",\"Q19\",\"Q19\",\"Q19\",\"Q19\",\"Q19\",\"Q19\",\"Q19\",\"Q19\",\"Q19\",\"Q19\",\"Q19\",\"Q19\",\"Q20\",\"Q20\",\"Q20\",\"Q20\",\"Q20\",\"Q20\",\"Q20\",\"Q20\",\"Q20\",\"Q20\",\"Q20\",\"Q20\",\"Q20\",\"Q20\",\"Q20\",\"Q20\",\"Q20\",\"Q20\",\"Q20\",\"Q20\",\"Q21\",\"Q21\",\"Q21\",\"Q21\",\"Q21\",\"Q21\",\"Q21\",\"Q21\",\"Q21\",\"Q21\",\"Q21\",\"Q21\",\"Q21\",\"Q21\",\"Q21\",\"Q21\",\"Q21\",\"Q21\",\"Q21\",\"Q21\",\"Q21\",\"Q22\",\"Q22\",\"Q22\",\"Q22\",\"Q22\",\"Q22\",\"Q22\",\"Q22\",\"Q22\",\"Q22\",\"Q22\",\"Q22\",\"Q22\",\"Q22\",\"Q22\",\"Q22\",\"Q22\",\"Q22\",\"Q22\",\"Q22\",\"Q22\",\"Q22\",\"Q23\",\"Q23\",\"Q23\",\"Q23\",\"Q23\",\"Q23\",\"Q23\",\"Q23\",\"Q23\",\"Q23\",\"Q23\",\"Q23\",\"Q23\",\"Q23\",\"Q23\",\"Q23\",\"Q23\",\"Q23\",\"Q23\",\"Q23\",\"Q23\",\"Q23\",\"Q23\",\"Q24\",\"Q24\",\"Q24\",\"Q24\",\"Q24\",\"Q24\",\"Q24\",\"Q24\",\"Q24\",\"Q24\",\"Q24\",\"Q24\",\"Q24\",\"Q24\",\"Q24\",\"Q24\",\"Q24\",\"Q24\",\"Q24\",\"Q24\",\"Q24\",\"Q24\",\"Q24\",\"Q24\",\"Q25\",\"Q25\",\"Q25\",\"Q25\",\"Q25\",\"Q25\",\"Q25\",\"Q25\",\"Q25\",\"Q25\",\"Q25\",\"Q25\",\"Q25\",\"Q25\",\"Q25\",\"Q25\",\"Q25\",\"Q25\",\"Q25\",\"Q25\",\"Q25\",\"Q25\",\"Q25\",\"Q25\",\"Q25\",\"Q26\",\"Q26\",\"Q26\",\"Q26\",\"Q26\",\"Q26\",\"Q26\",\"Q26\",\"Q26\",\"Q26\",\"Q26\",\"Q26\",\"Q26\",\"Q26\",\"Q26\",\"Q26\",\"Q26\",\"Q26\",\"Q26\",\"Q26\",\"Q26\",\"Q26\",\"Q26\",\"Q26\",\"Q26\",\"Q26\",\"Q27\",\"Q27\",\"Q27\",\"Q27\",\"Q27\",\"Q27\",\"Q27\",\"Q27\",\"Q27\",\"Q27\",\"Q27\",\"Q27\",\"Q27\",\"Q27\",\"Q27\",\"Q27\",\"Q27\",\"Q27\",\"Q27\",\"Q27\",\"Q27\",\"Q27\",\"Q27\",\"Q27\",\"Q27\",\"Q27\",\"Q27\",\"Q28\",\"Q28\",\"Q28\",\"Q28\",\"Q28\",\"Q28\",\"Q28\",\"Q28\",\"Q28\",\"Q28\",\"Q28\",\"Q28\",\"Q28\",\"Q28\",\"Q28\",\"Q28\",\"Q28\",\"Q28\",\"Q28\",\"Q28\",\"Q28\",\"Q28\",\"Q28\",\"Q28\",\"Q28\",\"Q28\",\"Q28\",\"Q28\",\"Q29\",\"Q29\",\"Q29\",\"Q29\",\"Q29\",\"Q29\",\"Q29\",\"Q29\",\"Q29\",\"Q29\",\"Q29\",\"Q29\",\"Q29\",\"Q29\",\"Q29\",\"Q29\",\"Q29\",\"Q29\",\"Q29\",\"Q29\",\"Q29\",\"Q29\",\"Q29\",\"Q29\",\"Q29\",\"Q29\",\"Q29\",\"Q29\",\"Q29\",\"Q30\",\"Q30\",\"Q30\",\"Q30\",\"Q30\",\"Q30\",\"Q30\",\"Q30\",\"Q30\",\"Q30\",\"Q30\",\"Q30\",\"Q30\",\"Q30\",\"Q30\",\"Q30\",\"Q30\",\"Q30\",\"Q30\",\"Q30\",\"Q30\",\"Q30\",\"Q30\",\"Q30\",\"Q30\",\"Q30\",\"Q30\",\"Q30\",\"Q30\",\"Q30\",\"Q31\",\"Q31\",\"Q31\",\"Q31\",\"Q31\",\"Q31\",\"Q31\",\"Q31\",\"Q31\",\"Q31\",\"Q31\",\"Q31\",\"Q31\",\"Q31\",\"Q31\",\"Q31\",\"Q31\",\"Q31\",\"Q31\",\"Q31\",\"Q31\",\"Q31\",\"Q31\",\"Q31\",\"Q31\",\"Q31\",\"Q31\",\"Q31\",\"Q31\",\"Q31\",\"Q31\",\"Q32\",\"Q32\",\"Q32\",\"Q32\",\"Q32\",\"Q32\",\"Q32\",\"Q32\",\"Q32\",\"Q32\",\"Q32\",\"Q32\",\"Q32\",\"Q32\",\"Q32\",\"Q32\",\"Q32\",\"Q32\",\"Q32\",\"Q32\",\"Q32\",\"Q32\",\"Q32\",\"Q32\",\"Q32\",\"Q32\",\"Q32\",\"Q32\",\"Q32\",\"Q32\",\"Q32\",\"Q32\",\"Q33\",\"Q33\",\"Q33\",\"Q33\",\"Q33\",\"Q33\",\"Q33\",\"Q33\",\"Q33\",\"Q33\",\"Q33\",\"Q33\",\"Q33\",\"Q33\",\"Q33\",\"Q33\",\"Q33\",\"Q33\",\"Q33\",\"Q33\",\"Q33\",\"Q33\",\"Q33\",\"Q33\",\"Q33\",\"Q33\",\"Q33\",\"Q33\",\"Q33\",\"Q33\",\"Q33\",\"Q33\",\"Q33\",\"Q34\",\"Q34\",\"Q34\",\"Q34\",\"Q34\",\"Q34\",\"Q34\",\"Q34\",\"Q34\",\"Q34\",\"Q34\",\"Q34\",\"Q34\",\"Q34\",\"Q34\",\"Q34\",\"Q34\",\"Q34\",\"Q34\",\"Q34\",\"Q34\",\"Q34\",\"Q34\",\"Q34\",\"Q34\",\"Q34\",\"Q34\",\"Q34\",\"Q34\",\"Q34\",\"Q34\",\"Q34\",\"Q34\",\"Q34\",\"Q35\",\"Q35\",\"Q35\",\"Q35\",\"Q35\",\"Q35\",\"Q35\",\"Q35\",\"Q35\",\"Q35\",\"Q35\",\"Q35\",\"Q35\",\"Q35\",\"Q35\",\"Q35\",\"Q35\",\"Q35\",\"Q35\",\"Q35\",\"Q35\",\"Q35\",\"Q35\",\"Q35\",\"Q35\",\"Q35\",\"Q35\",\"Q35\",\"Q35\",\"Q35\",\"Q35\",\"Q35\",\"Q35\",\"Q35\",\"Q35\",\"Q36\",\"Q36\",\"Q36\",\"Q36\",\"Q36\",\"Q36\",\"Q36\",\"Q36\",\"Q36\",\"Q36\",\"Q36\",\"Q36\",\"Q36\",\"Q36\",\"Q36\",\"Q36\",\"Q36\",\"Q36\",\"Q36\",\"Q36\",\"Q36\",\"Q36\",\"Q36\",\"Q36\",\"Q36\",\"Q36\",\"Q36\",\"Q36\",\"Q36\",\"Q36\",\"Q36\",\"Q36\",\"Q36\",\"Q36\",\"Q36\",\"Q36\",\"Q37\",\"Q37\",\"Q37\",\"Q37\",\"Q37\",\"Q37\",\"Q37\",\"Q37\",\"Q37\",\"Q37\",\"Q37\",\"Q37\",\"Q37\",\"Q37\",\"Q37\",\"Q37\",\"Q37\",\"Q37\",\"Q37\",\"Q37\",\"Q37\",\"Q37\",\"Q37\",\"Q37\",\"Q37\",\"Q37\",\"Q37\",\"Q37\",\"Q37\",\"Q37\",\"Q37\",\"Q37\",\"Q37\",\"Q37\",\"Q37\",\"Q37\",\"Q37\",\"Q38\",\"Q38\",\"Q38\",\"Q38\",\"Q38\",\"Q38\",\"Q38\",\"Q38\",\"Q38\",\"Q38\",\"Q38\",\"Q38\",\"Q38\",\"Q38\",\"Q38\",\"Q38\",\"Q38\",\"Q38\",\"Q38\",\"Q38\",\"Q38\",\"Q38\",\"Q38\",\"Q38\",\"Q38\",\"Q38\",\"Q38\",\"Q38\",\"Q38\",\"Q38\",\"Q38\",\"Q38\",\"Q38\",\"Q38\",\"Q38\",\"Q38\",\"Q38\",\"Q38\",\"Q39\",\"Q39\",\"Q39\",\"Q39\",\"Q39\",\"Q39\",\"Q39\",\"Q39\",\"Q39\",\"Q39\",\"Q39\",\"Q39\",\"Q39\",\"Q39\",\"Q39\",\"Q39\",\"Q39\",\"Q39\",\"Q39\",\"Q39\",\"Q39\",\"Q39\",\"Q39\",\"Q39\",\"Q39\",\"Q39\",\"Q39\",\"Q39\",\"Q39\",\"Q39\",\"Q39\",\"Q39\",\"Q39\",\"Q39\",\"Q39\",\"Q39\",\"Q39\",\"Q39\",\"Q39\",\"Q40\",\"Q40\",\"Q40\",\"Q40\",\"Q40\",\"Q40\",\"Q40\",\"Q40\",\"Q40\",\"Q40\",\"Q40\",\"Q40\",\"Q40\",\"Q40\",\"Q40\",\"Q40\",\"Q40\",\"Q40\",\"Q40\",\"Q40\",\"Q40\",\"Q40\",\"Q40\",\"Q40\",\"Q40\",\"Q40\",\"Q40\",\"Q40\",\"Q40\",\"Q40\",\"Q40\",\"Q40\",\"Q40\",\"Q40\",\"Q40\",\"Q40\",\"Q40\",\"Q40\",\"Q40\",\"Q40\",\"Q41\",\"Q41\",\"Q41\",\"Q41\",\"Q41\",\"Q41\",\"Q41\",\"Q41\",\"Q41\",\"Q41\",\"Q41\",\"Q41\",\"Q41\",\"Q41\",\"Q41\",\"Q41\",\"Q41\",\"Q41\",\"Q41\",\"Q41\",\"Q41\",\"Q41\",\"Q41\",\"Q41\",\"Q41\",\"Q41\",\"Q41\",\"Q41\",\"Q41\",\"Q41\",\"Q41\",\"Q41\",\"Q41\",\"Q41\",\"Q41\",\"Q41\",\"Q41\",\"Q41\",\"Q41\",\"Q41\",\"Q41\",\"Q42\",\"Q42\",\"Q42\",\"Q42\",\"Q42\",\"Q42\",\"Q42\",\"Q42\",\"Q42\",\"Q42\",\"Q42\",\"Q42\",\"Q42\",\"Q42\",\"Q42\",\"Q42\",\"Q42\",\"Q42\",\"Q42\",\"Q42\",\"Q42\",\"Q42\",\"Q42\",\"Q42\",\"Q42\",\"Q42\",\"Q42\",\"Q42\",\"Q42\",\"Q42\",\"Q42\",\"Q42\",\"Q42\",\"Q42\",\"Q42\",\"Q42\",\"Q42\",\"Q42\",\"Q42\",\"Q42\",\"Q42\",\"Q42\",\"Q43\",\"Q43\",\"Q43\",\"Q43\",\"Q43\",\"Q43\",\"Q43\",\"Q43\",\"Q43\",\"Q43\",\"Q43\",\"Q43\",\"Q43\",\"Q43\",\"Q43\",\"Q43\",\"Q43\",\"Q43\",\"Q43\",\"Q43\",\"Q43\",\"Q43\",\"Q43\",\"Q43\",\"Q43\",\"Q43\",\"Q43\",\"Q43\",\"Q43\",\"Q43\",\"Q43\",\"Q43\",\"Q43\",\"Q43\",\"Q43\",\"Q43\",\"Q43\",\"Q43\",\"Q43\",\"Q43\",\"Q43\",\"Q43\",\"Q43\",\"Q44\",\"Q44\",\"Q44\",\"Q44\",\"Q44\",\"Q44\",\"Q44\",\"Q44\",\"Q44\",\"Q44\",\"Q44\",\"Q44\",\"Q44\",\"Q44\",\"Q44\",\"Q44\",\"Q44\",\"Q44\",\"Q44\",\"Q44\",\"Q44\",\"Q44\",\"Q44\",\"Q44\",\"Q44\",\"Q44\",\"Q44\",\"Q44\",\"Q44\",\"Q44\",\"Q44\",\"Q44\",\"Q44\",\"Q44\",\"Q44\",\"Q44\",\"Q44\",\"Q44\",\"Q44\",\"Q44\",\"Q44\",\"Q44\",\"Q44\",\"Q44\"],\"y\":[\"Q1\",\"Q1\",\"Q2\",\"Q1\",\"Q2\",\"Q3\",\"Q1\",\"Q2\",\"Q3\",\"Q4\",\"Q1\",\"Q2\",\"Q3\",\"Q4\",\"Q5\",\"Q1\",\"Q2\",\"Q3\",\"Q4\",\"Q5\",\"Q6\",\"Q1\",\"Q2\",\"Q3\",\"Q4\",\"Q5\",\"Q6\",\"Q7\",\"Q1\",\"Q2\",\"Q3\",\"Q4\",\"Q5\",\"Q6\",\"Q7\",\"Q8\",\"Q1\",\"Q2\",\"Q3\",\"Q4\",\"Q5\",\"Q6\",\"Q7\",\"Q8\",\"Q9\",\"Q1\",\"Q2\",\"Q3\",\"Q4\",\"Q5\",\"Q6\",\"Q7\",\"Q8\",\"Q9\",\"Q10\",\"Q1\",\"Q2\",\"Q3\",\"Q4\",\"Q5\",\"Q6\",\"Q7\",\"Q8\",\"Q9\",\"Q10\",\"Q11\",\"Q1\",\"Q2\",\"Q3\",\"Q4\",\"Q5\",\"Q6\",\"Q7\",\"Q8\",\"Q9\",\"Q10\",\"Q11\",\"Q12\",\"Q1\",\"Q2\",\"Q3\",\"Q4\",\"Q5\",\"Q6\",\"Q7\",\"Q8\",\"Q9\",\"Q10\",\"Q11\",\"Q12\",\"Q13\",\"Q1\",\"Q2\",\"Q3\",\"Q4\",\"Q5\",\"Q6\",\"Q7\",\"Q8\",\"Q9\",\"Q10\",\"Q11\",\"Q12\",\"Q13\",\"Q14\",\"Q1\",\"Q2\",\"Q3\",\"Q4\",\"Q5\",\"Q6\",\"Q7\",\"Q8\",\"Q9\",\"Q10\",\"Q11\",\"Q12\",\"Q13\",\"Q14\",\"Q15\",\"Q1\",\"Q2\",\"Q3\",\"Q4\",\"Q5\",\"Q6\",\"Q7\",\"Q8\",\"Q9\",\"Q10\",\"Q11\",\"Q12\",\"Q13\",\"Q14\",\"Q15\",\"Q16\",\"Q1\",\"Q2\",\"Q3\",\"Q4\",\"Q5\",\"Q6\",\"Q7\",\"Q8\",\"Q9\",\"Q10\",\"Q11\",\"Q12\",\"Q13\",\"Q14\",\"Q15\",\"Q16\",\"Q17\",\"Q1\",\"Q2\",\"Q3\",\"Q4\",\"Q5\",\"Q6\",\"Q7\",\"Q8\",\"Q9\",\"Q10\",\"Q11\",\"Q12\",\"Q13\",\"Q14\",\"Q15\",\"Q16\",\"Q17\",\"Q18\",\"Q1\",\"Q2\",\"Q3\",\"Q4\",\"Q5\",\"Q6\",\"Q7\",\"Q8\",\"Q9\",\"Q10\",\"Q11\",\"Q12\",\"Q13\",\"Q14\",\"Q15\",\"Q16\",\"Q17\",\"Q18\",\"Q19\",\"Q1\",\"Q2\",\"Q3\",\"Q4\",\"Q5\",\"Q6\",\"Q7\",\"Q8\",\"Q9\",\"Q10\",\"Q11\",\"Q12\",\"Q13\",\"Q14\",\"Q15\",\"Q16\",\"Q17\",\"Q18\",\"Q19\",\"Q20\",\"Q1\",\"Q2\",\"Q3\",\"Q4\",\"Q5\",\"Q6\",\"Q7\",\"Q8\",\"Q9\",\"Q10\",\"Q11\",\"Q12\",\"Q13\",\"Q14\",\"Q15\",\"Q16\",\"Q17\",\"Q18\",\"Q19\",\"Q20\",\"Q21\",\"Q1\",\"Q2\",\"Q3\",\"Q4\",\"Q5\",\"Q6\",\"Q7\",\"Q8\",\"Q9\",\"Q10\",\"Q11\",\"Q12\",\"Q13\",\"Q14\",\"Q15\",\"Q16\",\"Q17\",\"Q18\",\"Q19\",\"Q20\",\"Q21\",\"Q22\",\"Q1\",\"Q2\",\"Q3\",\"Q4\",\"Q5\",\"Q6\",\"Q7\",\"Q8\",\"Q9\",\"Q10\",\"Q11\",\"Q12\",\"Q13\",\"Q14\",\"Q15\",\"Q16\",\"Q17\",\"Q18\",\"Q19\",\"Q20\",\"Q21\",\"Q22\",\"Q23\",\"Q1\",\"Q2\",\"Q3\",\"Q4\",\"Q5\",\"Q6\",\"Q7\",\"Q8\",\"Q9\",\"Q10\",\"Q11\",\"Q12\",\"Q13\",\"Q14\",\"Q15\",\"Q16\",\"Q17\",\"Q18\",\"Q19\",\"Q20\",\"Q21\",\"Q22\",\"Q23\",\"Q24\",\"Q1\",\"Q2\",\"Q3\",\"Q4\",\"Q5\",\"Q6\",\"Q7\",\"Q8\",\"Q9\",\"Q10\",\"Q11\",\"Q12\",\"Q13\",\"Q14\",\"Q15\",\"Q16\",\"Q17\",\"Q18\",\"Q19\",\"Q20\",\"Q21\",\"Q22\",\"Q23\",\"Q24\",\"Q25\",\"Q1\",\"Q2\",\"Q3\",\"Q4\",\"Q5\",\"Q6\",\"Q7\",\"Q8\",\"Q9\",\"Q10\",\"Q11\",\"Q12\",\"Q13\",\"Q14\",\"Q15\",\"Q16\",\"Q17\",\"Q18\",\"Q19\",\"Q20\",\"Q21\",\"Q22\",\"Q23\",\"Q24\",\"Q25\",\"Q26\",\"Q1\",\"Q2\",\"Q3\",\"Q4\",\"Q5\",\"Q6\",\"Q7\",\"Q8\",\"Q9\",\"Q10\",\"Q11\",\"Q12\",\"Q13\",\"Q14\",\"Q15\",\"Q16\",\"Q17\",\"Q18\",\"Q19\",\"Q20\",\"Q21\",\"Q22\",\"Q23\",\"Q24\",\"Q25\",\"Q26\",\"Q27\",\"Q1\",\"Q2\",\"Q3\",\"Q4\",\"Q5\",\"Q6\",\"Q7\",\"Q8\",\"Q9\",\"Q10\",\"Q11\",\"Q12\",\"Q13\",\"Q14\",\"Q15\",\"Q16\",\"Q17\",\"Q18\",\"Q19\",\"Q20\",\"Q21\",\"Q22\",\"Q23\",\"Q24\",\"Q25\",\"Q26\",\"Q27\",\"Q28\",\"Q1\",\"Q2\",\"Q3\",\"Q4\",\"Q5\",\"Q6\",\"Q7\",\"Q8\",\"Q9\",\"Q10\",\"Q11\",\"Q12\",\"Q13\",\"Q14\",\"Q15\",\"Q16\",\"Q17\",\"Q18\",\"Q19\",\"Q20\",\"Q21\",\"Q22\",\"Q23\",\"Q24\",\"Q25\",\"Q26\",\"Q27\",\"Q28\",\"Q29\",\"Q1\",\"Q2\",\"Q3\",\"Q4\",\"Q5\",\"Q6\",\"Q7\",\"Q8\",\"Q9\",\"Q10\",\"Q11\",\"Q12\",\"Q13\",\"Q14\",\"Q15\",\"Q16\",\"Q17\",\"Q18\",\"Q19\",\"Q20\",\"Q21\",\"Q22\",\"Q23\",\"Q24\",\"Q25\",\"Q26\",\"Q27\",\"Q28\",\"Q29\",\"Q30\",\"Q1\",\"Q2\",\"Q3\",\"Q4\",\"Q5\",\"Q6\",\"Q7\",\"Q8\",\"Q9\",\"Q10\",\"Q11\",\"Q12\",\"Q13\",\"Q14\",\"Q15\",\"Q16\",\"Q17\",\"Q18\",\"Q19\",\"Q20\",\"Q21\",\"Q22\",\"Q23\",\"Q24\",\"Q25\",\"Q26\",\"Q27\",\"Q28\",\"Q29\",\"Q30\",\"Q31\",\"Q1\",\"Q2\",\"Q3\",\"Q4\",\"Q5\",\"Q6\",\"Q7\",\"Q8\",\"Q9\",\"Q10\",\"Q11\",\"Q12\",\"Q13\",\"Q14\",\"Q15\",\"Q16\",\"Q17\",\"Q18\",\"Q19\",\"Q20\",\"Q21\",\"Q22\",\"Q23\",\"Q24\",\"Q25\",\"Q26\",\"Q27\",\"Q28\",\"Q29\",\"Q30\",\"Q31\",\"Q32\",\"Q1\",\"Q2\",\"Q3\",\"Q4\",\"Q5\",\"Q6\",\"Q7\",\"Q8\",\"Q9\",\"Q10\",\"Q11\",\"Q12\",\"Q13\",\"Q14\",\"Q15\",\"Q16\",\"Q17\",\"Q18\",\"Q19\",\"Q20\",\"Q21\",\"Q22\",\"Q23\",\"Q24\",\"Q25\",\"Q26\",\"Q27\",\"Q28\",\"Q29\",\"Q30\",\"Q31\",\"Q32\",\"Q33\",\"Q1\",\"Q2\",\"Q3\",\"Q4\",\"Q5\",\"Q6\",\"Q7\",\"Q8\",\"Q9\",\"Q10\",\"Q11\",\"Q12\",\"Q13\",\"Q14\",\"Q15\",\"Q16\",\"Q17\",\"Q18\",\"Q19\",\"Q20\",\"Q21\",\"Q22\",\"Q23\",\"Q24\",\"Q25\",\"Q26\",\"Q27\",\"Q28\",\"Q29\",\"Q30\",\"Q31\",\"Q32\",\"Q33\",\"Q34\",\"Q1\",\"Q2\",\"Q3\",\"Q4\",\"Q5\",\"Q6\",\"Q7\",\"Q8\",\"Q9\",\"Q10\",\"Q11\",\"Q12\",\"Q13\",\"Q14\",\"Q15\",\"Q16\",\"Q17\",\"Q18\",\"Q19\",\"Q20\",\"Q21\",\"Q22\",\"Q23\",\"Q24\",\"Q25\",\"Q26\",\"Q27\",\"Q28\",\"Q29\",\"Q30\",\"Q31\",\"Q32\",\"Q33\",\"Q34\",\"Q35\",\"Q1\",\"Q2\",\"Q3\",\"Q4\",\"Q5\",\"Q6\",\"Q7\",\"Q8\",\"Q9\",\"Q10\",\"Q11\",\"Q12\",\"Q13\",\"Q14\",\"Q15\",\"Q16\",\"Q17\",\"Q18\",\"Q19\",\"Q20\",\"Q21\",\"Q22\",\"Q23\",\"Q24\",\"Q25\",\"Q26\",\"Q27\",\"Q28\",\"Q29\",\"Q30\",\"Q31\",\"Q32\",\"Q33\",\"Q34\",\"Q35\",\"Q36\",\"Q1\",\"Q2\",\"Q3\",\"Q4\",\"Q5\",\"Q6\",\"Q7\",\"Q8\",\"Q9\",\"Q10\",\"Q11\",\"Q12\",\"Q13\",\"Q14\",\"Q15\",\"Q16\",\"Q17\",\"Q18\",\"Q19\",\"Q20\",\"Q21\",\"Q22\",\"Q23\",\"Q24\",\"Q25\",\"Q26\",\"Q27\",\"Q28\",\"Q29\",\"Q30\",\"Q31\",\"Q32\",\"Q33\",\"Q34\",\"Q35\",\"Q36\",\"Q37\",\"Q1\",\"Q2\",\"Q3\",\"Q4\",\"Q5\",\"Q6\",\"Q7\",\"Q8\",\"Q9\",\"Q10\",\"Q11\",\"Q12\",\"Q13\",\"Q14\",\"Q15\",\"Q16\",\"Q17\",\"Q18\",\"Q19\",\"Q20\",\"Q21\",\"Q22\",\"Q23\",\"Q24\",\"Q25\",\"Q26\",\"Q27\",\"Q28\",\"Q29\",\"Q30\",\"Q31\",\"Q32\",\"Q33\",\"Q34\",\"Q35\",\"Q36\",\"Q37\",\"Q38\",\"Q1\",\"Q2\",\"Q3\",\"Q4\",\"Q5\",\"Q6\",\"Q7\",\"Q8\",\"Q9\",\"Q10\",\"Q11\",\"Q12\",\"Q13\",\"Q14\",\"Q15\",\"Q16\",\"Q17\",\"Q18\",\"Q19\",\"Q20\",\"Q21\",\"Q22\",\"Q23\",\"Q24\",\"Q25\",\"Q26\",\"Q27\",\"Q28\",\"Q29\",\"Q30\",\"Q31\",\"Q32\",\"Q33\",\"Q34\",\"Q35\",\"Q36\",\"Q37\",\"Q38\",\"Q39\",\"Q1\",\"Q2\",\"Q3\",\"Q4\",\"Q5\",\"Q6\",\"Q7\",\"Q8\",\"Q9\",\"Q10\",\"Q11\",\"Q12\",\"Q13\",\"Q14\",\"Q15\",\"Q16\",\"Q17\",\"Q18\",\"Q19\",\"Q20\",\"Q21\",\"Q22\",\"Q23\",\"Q24\",\"Q25\",\"Q26\",\"Q27\",\"Q28\",\"Q29\",\"Q30\",\"Q31\",\"Q32\",\"Q33\",\"Q34\",\"Q35\",\"Q36\",\"Q37\",\"Q38\",\"Q39\",\"Q40\",\"Q1\",\"Q2\",\"Q3\",\"Q4\",\"Q5\",\"Q6\",\"Q7\",\"Q8\",\"Q9\",\"Q10\",\"Q11\",\"Q12\",\"Q13\",\"Q14\",\"Q15\",\"Q16\",\"Q17\",\"Q18\",\"Q19\",\"Q20\",\"Q21\",\"Q22\",\"Q23\",\"Q24\",\"Q25\",\"Q26\",\"Q27\",\"Q28\",\"Q29\",\"Q30\",\"Q31\",\"Q32\",\"Q33\",\"Q34\",\"Q35\",\"Q36\",\"Q37\",\"Q38\",\"Q39\",\"Q40\",\"Q41\",\"Q1\",\"Q2\",\"Q3\",\"Q4\",\"Q5\",\"Q6\",\"Q7\",\"Q8\",\"Q9\",\"Q10\",\"Q11\",\"Q12\",\"Q13\",\"Q14\",\"Q15\",\"Q16\",\"Q17\",\"Q18\",\"Q19\",\"Q20\",\"Q21\",\"Q22\",\"Q23\",\"Q24\",\"Q25\",\"Q26\",\"Q27\",\"Q28\",\"Q29\",\"Q30\",\"Q31\",\"Q32\",\"Q33\",\"Q34\",\"Q35\",\"Q36\",\"Q37\",\"Q38\",\"Q39\",\"Q40\",\"Q41\",\"Q42\",\"Q1\",\"Q2\",\"Q3\",\"Q4\",\"Q5\",\"Q6\",\"Q7\",\"Q8\",\"Q9\",\"Q10\",\"Q11\",\"Q12\",\"Q13\",\"Q14\",\"Q15\",\"Q16\",\"Q17\",\"Q18\",\"Q19\",\"Q20\",\"Q21\",\"Q22\",\"Q23\",\"Q24\",\"Q25\",\"Q26\",\"Q27\",\"Q28\",\"Q29\",\"Q30\",\"Q31\",\"Q32\",\"Q33\",\"Q34\",\"Q35\",\"Q36\",\"Q37\",\"Q38\",\"Q39\",\"Q40\",\"Q41\",\"Q42\",\"Q43\",\"Q1\",\"Q2\",\"Q3\",\"Q4\",\"Q5\",\"Q6\",\"Q7\",\"Q8\",\"Q9\",\"Q10\",\"Q11\",\"Q12\",\"Q13\",\"Q14\",\"Q15\",\"Q16\",\"Q17\",\"Q18\",\"Q19\",\"Q20\",\"Q21\",\"Q22\",\"Q23\",\"Q24\",\"Q25\",\"Q26\",\"Q27\",\"Q28\",\"Q29\",\"Q30\",\"Q31\",\"Q32\",\"Q33\",\"Q34\",\"Q35\",\"Q36\",\"Q37\",\"Q38\",\"Q39\",\"Q40\",\"Q41\",\"Q42\",\"Q43\",\"Q44\"],\"z\":[1,-0.22645790681413402,1,0.3437384695868711,-0.093258235606642273,1,-0.12022938135127732,0.37303130608072954,0.02773987582371169,1,0.24957764338750171,-0.13530382496768556,0.35071429980898106,0.036741785177344326,1,-0.091915605139234455,0.189116126207511,-0.056699353526826028,0.11820507115571524,0.012797952633148812,1,0.23364544831936301,-0.23157473497214656,0.29470966154964923,-0.11395496681944085,0.27416076169972492,-0.036644606081133207,1,-0.16500442045139141,0.21695643331506431,-0.14725371305814552,0.23384604890614133,-0.095459574070496739,0.084421242683609676,-0.091613975395213126,1,0.29093596554833734,-0.24441154129514689,0.50749025115199708,-0.14530264870936288,0.28226621298609439,-0.10303527956496886,0.36961645317370717,-0.14721784303049074,1,-0.12281658774191206,0.26939510595168881,-0.082618328278941458,0.09417036948680188,-0.0935326547469153,0.22651988284968255,-0.063955555324802391,0.13210516092466451,-0.068326538852518534,1,0.14127432097381348,-0.075127178242920839,0.18787275627474809,-0.16824211512852169,0.085440193411562712,0.070681707363145788,0.1079052881320829,-0.16834671119133163,0.20056131535519084,0.076785523775342687,1,-0.2086452390196171,0.34114549330867616,-0.18647662637660431,0.25981783934427816,-0.14429912072070902,0.092838607165684608,-0.18745035592357687,0.27855704301246392,-0.19800734820291674,0.16076656459855918,-0.16502450271111488,1,0.28224353840144234,-0.3223076742603761,0.075297451189154693,-0.26718507287121201,0.074740632115940231,-0.071349637281546446,0.098726824244055239,-0.12207587440542557,0.16786108896956281,-0.12479617635839439,-0.035331222273475515,-0.21127328733645634,1,-0.13220523182777533,0.34427023266558626,-0.090199256955695029,0.26682762317610798,-0.045575837296088967,0.11514038328245339,-0.12667071071414857,0.20681160192527026,-0.1801801284180474,0.1178764312804569,-0.081988325304069298,0.31160006498653814,-0.208371105126374,1,0.29533607167550624,-0.0053664735661278339,0.4060920046749627,-0.0077002133948702832,0.37060559467102033,-0.02260046050281277,0.28642408779359935,-0.13903712162736689,0.36529916223685699,-0.016720255735923607,0.19926441626975808,-0.14574442376362379,0.015670518380316481,0.022589350125871602,1,-0.17752808385734817,0.39655792124673089,-0.13803131774369692,0.33866822882204273,-0.053122934491382598,0.068631616901382878,-0.1543541038082912,0.26932509779192187,-0.24146803290905666,0.12754492244608864,-0.17590118006319774,0.30932375309811627,-0.266725718558183,0.39360764176542629,-0.036894728222434219,1,0.24549832535101421,-0.12415294295894949,0.39094496241551713,-0.073241553638381751,0.33520914867684976,-0.072865706803895688,0.34694473552458033,-0.11917127414679282,0.49285212273767404,-0.065043856391166527,0.13991313773017519,-0.13290538907466926,0.12629873281947335,-0.097295964969155851,0.3506941307310012,-0.14219642201600527,1,-0.070076586841133201,0.22326381113873064,0.004931549014096385,0.15978624449622189,0.00055544954456876699,0.22405994743036067,-0.048820910909115486,0.084004948574490632,-0.054589872106011399,0.18597948224171429,0.020295072820686891,0.10811638790416943,-0.084136670949114145,0.15304323817169188,0.013787717941985921,0.16766760303122216,-0.011341474843832255,1,0.21915627974277288,-0.20180697758410662,0.23678271404643556,-0.18673294900977505,0.10797439874089079,-0.068827466990810549,0.15600820213211303,-0.21138416228955587,0.29364032219420844,-0.065286700355670441,0.16535906200484471,-0.22310132056196869,0.21860058726981169,-0.21373985168054799,0.24189645357948927,-0.2523109298385755,0.24097899683154173,-0.041296501570740572,1,-0.26272631316798295,0.440109126672936,-0.20660298782485736,0.31152356251251556,-0.13515015171480849,0.26066949264424094,-0.19683611218439148,0.26910703940835012,-0.25051386431826439,0.26832500893827388,-0.10257059415403491,0.3338256998358558,-0.26929787859405302,0.34004538743876478,-0.1315597986598383,0.37112174157241234,-0.16938590830541214,0.25620217647789795,-0.2995835129791784,1,0.16214974625766448,-0.13276397589099292,0.16908168063136014,-0.1662038993436773,0.1205720631308885,-0.014307297483725069,0.12641984360593697,-0.77072959090413973,0.14435672336407579,-0.068647571149549821,0.1824516966785987,-0.23002213118982698,0.097242597683053766,-0.14433479027426063,0.17779161687256104,-0.20033827239003058,0.13849235128134618,-0.02253988257510291,0.20860775022486841,-0.19307452699190489,1,-0.16736224065457594,0.25536565621619106,-0.12351969261795244,0.34788656061229656,-0.058484383678615776,0.13194015311955057,-0.1136092193120072,0.29296055758680156,-0.17503229025826161,0.11108022275769407,-0.14180365458300467,0.27566298597123617,-0.23468360678926595,0.279857961876675,-0.10078113673974781,0.30359792593652918,-0.11153865879765486,0.15466645493894698,-0.26417002053034039,0.32561199122126022,-0.22750260724296756,1,0.11208267386202635,0.010503187515419968,0.23095921638818132,-0.020639297876019608,0.15700347166796289,0.026226878357587753,0.16629341485709706,0.00032680989880561729,0.20810196515832777,0.063290415717099494,0.10314983135593783,-0.082820358507797481,0.043379633537158367,-0.00067396280957026733,0.27871459842154028,-0.013892601248472608,0.17687373137286264,0.066921060173626659,0.16620903779286861,-0.027540704801106118,0.053356858172220002,-0.029992847811051212,1,-0.22238144575712898,0.32280736182888953,-0.10924575808181079,0.20849474093702389,-0.081764738541107704,0.14222282150055154,-0.1020055194695063,0.20226810745358453,-0.21668380000438658,0.17381071463445327,-0.026168669177386455,0.19728164327564141,-0.2778009282750053,0.19530874973171458,-0.036934479664409457,0.24053452654253274,-0.13940456538120219,0.14595669602328848,-0.18976926104536487,0.27962503874433625,-0.1572238053595684,0.1937526583453146,-0.019041565416358427,1,0.2830751348467751,-0.33699024560029245,0.32391276529948371,-0.15061126135548153,0.27777649700742552,-0.19902631487289524,0.21657736676983555,-0.12421273942004407,0.32764521437519378,-0.21993834577278687,0.046700065348588754,-0.17867240386729538,0.206478217892546,-0.14636412619053149,0.2251259464853681,-0.20544625844048217,0.34364228860364493,-0.12801280210482743,0.20449239615355214,-0.33417765520512405,0.10980518675527874,-0.16155920946809293,0.11440086756174049,-0.14440573898814887,1,-0.12037906933489582,0.30719578527634839,-0.094675373934872645,0.27636875755203066,-0.027833973868267366,0.11206602839303675,-0.11809887564847694,0.21621640504919476,-0.15674436028038025,0.12070569822275788,-0.1069719758556411,0.25591382717340072,-0.17547652484316559,0.42036477814257855,-0.072435413422604608,0.34174411989368236,-0.12263553728790288,0.15155592925849706,-0.24791927877870443,0.36127492799044003,-0.15161549150867096,0.28610492409297617,-0.020439256117355288,0.16475636899849047,-0.13049863029137357,1,0.25062290418758715,-0.094538680130541244,0.32142640446590015,-0.046607897490814718,0.30541062366768201,-0.041617759927579094,0.20317562855435398,-0.14752559434474555,0.30494418389319483,-0.064245312485307252,0.14172701778846911,-0.17745548442897921,0.10275451358928925,-0.062937683725389812,0.43137643382786667,-0.086102628410022558,0.30847018345557553,0.035353094416604863,0.25141787472080435,-0.16738040630773832,0.1687856706058154,-0.10852613393094769,0.20156634636982332,-0.092199225449175318,0.23597279230465351,-0.054738206430147776,1,-0.13236824486822815,0.33803253539533573,-0.10222228103768115,0.30125139447546406,-0.082959725846817906,0.18062880813991039,-0.12550687713672024,0.18735627050254408,-0.17667830785478333,0.27177166299001759,-0.093426994302824473,0.27997446361109485,-0.16592550913727977,0.2919163770456859,-0.083937016301072837,0.30647801740502084,-0.13254454558668974,0.22883347544836288,-0.1813049278422737,0.34713720289429206,-0.11898160886902834,0.25806764886545497,-0.014974827444231681,0.18133437233696839,-0.20509465049411216,0.34778678124244417,-0.054797263536675918,1,0.27169572805035991,-0.09358601661101805,0.43235490432220325,0.023758816600982252,0.24963733402290045,-0.05662109144504588,0.18339019084581132,-0.12995781119431266,0.29293286840794819,-0.08037236299548263,0.11320299902913344,-0.16514972502756006,0.092503543593858789,-0.076789285256911921,0.29965106589398222,-0.078278537692734754,0.25672061889227371,0.035982164551743315,0.19238262862620878,-0.17319145927387053,0.1567089560829287,-0.10245537912922578,0.17995990173667795,-0.11189199998969525,0.24798298554912787,-0.074346662969253643,0.31058404897523662,-0.063422049802083019,1,-0.17811685365331428,0.41894004197490992,-0.10791102466496443,0.26840681002947214,-0.094460565284025647,0.14264165674013679,-0.14881207414588138,0.27393597541782821,-0.16683129603217731,0.22342113323494034,-0.051976933659166634,0.28528097099288141,-0.31681718862957386,0.31345767265033481,-0.0041686488651291008,0.32497861685107265,-0.093536632307390122,0.14551382843419144,-0.19498294550994302,0.37434915180515077,-0.20242661496185305,0.28085355406948503,-0.0022791517279890047,0.29404126336441266,-0.20583403793113431,0.27936018655729339,-0.05711785950371772,0.26999709367819075,-0.07655747887170003,1,0.23163136026783235,-0.26511005403334686,0.22534655736960377,-0.14885369706882659,0.19544184498665695,-0.057544223510666376,0.20838297018565358,-0.22486404618632533,0.18371886857434813,-0.14446892298106162,0.1618349067021724,-0.31855905674879087,0.1815801080405556,-0.21659022629941263,0.20948212893697249,-0.24495204635399076,0.18488719857313926,-0.073273442727550639,0.22790929672429422,-0.2778620394060406,0.22084917613486313,-0.23060222231876107,0.061498873522615884,-0.1451678276904744,0.22040847948001718,-0.21602355817242161,0.21171294224071407,-0.19914663179329051,0.21668869143384858,-0.22002974774764589,1,-0.10561950758090867,0.35356303699808972,-0.14757734013698093,0.20669153555900677,-0.078047982030571422,0.11993713403453909,-0.14059063512526546,0.068839195733185379,-0.34063195328046225,0.026915933087242473,-0.067739946919302255,0.1979165998358435,-0.16475622247851821,0.20821504228508597,-0.032558271807278959,0.23673166959450614,-0.11399881306972255,0.12559883392668197,-0.1946203098457068,0.22070543330792078,-0.040041157353676492,0.17481976509590108,-0.13623599895041269,0.31780547023445926,-0.16250636474756333,0.14681394480978632,-0.052574625742709394,0.15858093332799697,-0.070306386669991561,0.207923310078414,-0.040758916255602615,1,0.18338505953812881,-0.28242718635736386,0.16754527687745444,-0.15619561391619885,0.15401699648391676,-0.031036700363530352,0.16526906425898305,-0.20507691054738034,0.15110830946979539,-0.10055169877904731,0.075767639275769988,-0.29134767837214548,0.23559063254813481,-0.24163052990116024,0.1571135765878135,-0.22020061486244621,0.15640993790877025,-0.066759611752061646,0.21391441913284373,-0.24895499790425502,0.21367581294573285,-0.22145855239372478,0.050587118732029902,-0.12672476824740031,0.15278226618670684,-0.22790652640741549,0.16920264351752637,-0.17777904137492914,0.17040472659188188,-0.24611640211510652,0.38544858867340004,-0.062998115327869961,1,-0.14648755080416884,0.31703672394587717,-0.12360856796405846,0.3181745185994414,-0.07574620770904758,0.090115730792366566,-0.13892583942611761,0.18389522564543412,-0.22480219545878241,0.058947166861999932,-0.15046658359045834,0.28093677194700512,-0.24380647681010509,0.28888422009069292,-0.059634466454278098,0.34280750319641917,-0.11694274861711235,0.12077937173748739,-0.2298565142137344,0.30704204046221129,-0.13596282490209402,0.36641007270804604,-0.13176399787214019,0.17050956887392751,-0.16403808427164385,0.25933829948815446,-0.076415845098214044,0.22558841679720787,-0.079563701963822953,0.27810824041223398,-0.1493915287448136,0.3152380870891282,-0.14218120448544291,1,0.35564237546108851,-0.1538079275264739,0.42379861326621487,0.04489292083362785,0.27839259421162421,-0.031580010893110126,0.25209708800191027,-0.15866355612998215,0.31448127655057295,-0.086065275585444537,0.11828885544216904,-0.18013726063482111,0.23021090734490041,-0.093561529345330643,0.29835275262968214,-0.14921557434484239,0.2962479657243911,0.00028336971201465015,0.19321912337952876,-0.19799754357267471,0.1773110532110197,-0.092695868622985914,0.15158605740211434,-0.13201274932611493,0.25606493282300963,-0.076707778010197666,0.27123069015849971,-0.082195142150665673,0.40325703357198595,-0.17136565134974827,0.27190290904523651,-0.051991803706794175,0.21444542861897289,-0.058299232258017052,1,-0.17652776705653278,0.32097421505196705,-0.11655215186106108,0.32424841395965398,-0.11202748734034032,0.058203555090844912,-0.15863846303382145,0.31301228168692863,-0.13696556611301527,0.13938400912854326,-0.15785169520212761,0.30084085987584291,-0.24899575620930295,0.27531638750183773,-0.12674391536377363,0.34938251883885196,-0.12502844644306724,0.12603397283505721,-0.23109708512916446,0.31861019012440811,-0.25365208261100108,0.33921823237786908,-0.0031800580805377747,0.21709326916110749,-0.12539925418212156,0.31382679979196387,-0.089669616465791441,0.26759289355205962,-0.073124644459430774,0.29337833840825928,-0.32148914204654988,0.11504021600570362,-0.30948110116437055,0.28552332054363427,-0.095779292897552659,1,0.24056120139069492,-0.19861813748585047,0.28470428416822385,-0.19620035884956147,0.17066975982294608,0.0065688275350307143,0.24883752968178954,-0.182715983040247,0.28189561200088692,0.028650825841028977,0.25850067843158209,-0.23158494033484264,0.13613775805416289,-0.14468052392198782,0.1676200188107759,-0.28293701880471439,0.18361850420082637,-0.027623115961139123,0.15166804444109203,-0.17891779272271247,0.18373879127070714,-0.17334299997530442,0.15324565909852936,-0.096696731831040397,0.16079013819938412,-0.12567849445140739,0.12031713034024567,-0.11711438706217776,0.16519368224595821,-0.1322618499914392,0.21058999793921152,-0.18373191830541988,0.12414695103688742,-0.18233091838718765,0.29053543640534413,-0.18093649100892717,1,-0.13533594701107313,0.312009477546901,-0.092518817031689626,0.44607998759007111,-0.019016050185204265,0.06055151972406761,-0.13205366512898767,0.30885773676072414,-0.18776213625526492,0.094454205077832143,-0.17632500770500209,0.30556583870346848,-0.2340633831037689,0.31723650921555224,-0.097547888443842851,0.38718642968125133,-0.11298980014287625,0.13377225281019342,-0.27841318486203875,0.35818737710981252,-0.25152355047669039,0.43431907246437768,-0.061247660464069258,0.21611769835380457,-0.14640944332998482,0.37961892157214294,-0.10640775910568781,0.32921203395535342,-0.0720948912592205,0.29492298663608651,-0.19719750511172768,0.19923390445343156,-0.21741359568422167,0.3853785919380322,-0.045335976708814923,0.40325248922179996,-0.15226188295007442,1,0.34464589898453635,-0.12510205765174343,0.58838577489727373,-0.033642110021245522,0.30909053397030645,-0.077529069780106694,0.26802448578465854,-0.15784209780255279,0.44235182387123184,-0.085194488055702913,0.21497181722561032,-0.1999426047574529,0.1381942130620325,-0.10252926479955977,0.41213255623268269,-0.13242244127341576,0.36026317652165718,0.017020635554829529,0.24838149356766989,-0.23037859452883025,0.18715579236231261,-0.14093760164157312,0.25917581663532152,-0.13332478024478009,0.30962841983391393,-0.10689236201609051,0.38253665826066929,-0.10267380955829847,0.5464061806573326,-0.13539375252410688,0.24854214326007171,-0.097080479308782608,0.18949836470658879,-0.13747378500335472,0.49455267956317012,-0.10271765763194537,0.25675607952066282,-0.084863074447506875,1,-0.10952269179883091,0.32510221033993797,-0.090968349777768021,0.26541624632414773,-0.054837640487921002,0.015664980636589412,-0.14188598584201118,0.2143061591532123,-0.16830971488905619,0.049353760508270936,-0.12995859919982902,0.30782707910809703,-0.21086226182313458,0.68158011786998973,-0.019663235929618765,0.40007186144221679,-0.085352448363779337,0.09046474888692918,-0.22549031718864762,0.29147281288399057,-0.16015855514200675,0.26722243132826062,-0.03701446425438143,0.18315538189875194,-0.077994271144079266,0.41386672505175237,-0.07341913752900156,0.25725179849562257,-0.071081752570456611,0.30737005588088995,-0.22562629630480188,0.19340172861974558,-0.27681575303638623,0.28685536885214719,-0.10165064032203024,0.31635956733773213,-0.20361465517594388,0.34421241986521128,-0.076909618049760375,1,0.21704153038517038,-0.20451244132276264,0.25478713216105447,-0.072975547379905525,0.19466197191962434,-0.076462716705484657,0.12904389355700566,-0.11374631686102961,0.18325101051066134,-0.14145614139251736,0.067773545880372724,-0.1536053857755624,0.18842363547552723,-0.013099026138766109,0.17917688990859501,-0.10395789763039195,0.19520671960921215,0.043460509025904003,0.13513588614213548,-0.19725122124118818,0.12418940605037629,-0.069422315442385932,0.1418029021566985,-0.12926577635436931,0.34393849986702341,-0.021184145972813331,0.20874223460308028,-0.065300946548508515,0.24676458733520065,-0.16754018636754434,0.19388044246211827,-0.075567727163190851,0.13995042205079211,-0.098198470099657681,0.26252780163656536,-0.10162970486010722,0.1397023673179163,-0.075381250275910222,0.29502932469403431,0.0066602421453822195,1,-0.12308596590707112,0.30737824306647193,-0.076053182203364128,0.3519711741727119,-0.069256661030996924,0.14289074575658647,-0.11200974393302951,0.20363888273334457,-0.14041701113361485,0.1982690183355667,-0.094006042671042511,0.27902126528759558,-0.18581886292988556,0.25851938382410083,-0.077355043304514703,0.28035526224681834,-0.10149264148282605,0.14832981042389221,-0.16944630638859606,0.31638588215449598,-0.15004378153046763,0.24832804207288608,-0.042289113692685364,0.17209224116939359,-0.2022996962722873,0.26764208039396487,-0.077835919713312163,0.34986444087661239,-0.050129497713057442,0.25929157043407303,-0.18547620033558507,0.15470458440893578,-0.2031244601389558,0.20953165138218247,-0.022461756148478472,0.25278939038325421,-0.12335044967762757,0.32683948750873665,-0.063273625529964211,0.24039383333588141,-0.090105395891163204,1,0.25333116513491583,-0.094420122392045849,0.32996705999204751,-0.044799422300166522,0.30972785376753725,-0.03966782656747115,0.2094207584777866,-0.14436025499289845,0.31344492656283651,-0.062431794813898801,0.13589162053736276,-0.18234725506091484,0.10109465426352726,-0.065884806133408122,0.44217344437647393,-0.089998663072936136,0.31316989601009276,0.030697385874128673,0.25326973078799631,-0.17398062695068883,0.16571346231078293,-0.10941695226586998,0.20611923832814993,-0.094268151439651088,0.23183662785850664,-0.070947965560338971,0.96719325166876835,-0.062787309467597627,0.32053768699841639,-0.060069722046257622,0.21236371277123384,-0.053758250056006436,0.17512186133989271,-0.076105733866903433,0.28004406376518115,-0.093761651566014181,0.1220252480134232,-0.10622343715716417,0.3993889681144937,-0.073211640097368094,0.21911624353666923,-0.064777417908996424,1,-0.19425387567722011,0.40244208382240604,-0.077412979905788257,0.38130381336404878,-0.097607474336982344,0.13400367078533235,-0.13268742768742581,0.23104524332038126,-0.17340724343958633,0.17358445952768073,-0.08880272344401248,0.28147018075539121,-0.30510428067739992,0.29486063648584732,-0.062199242153421139,0.33012707438861971,-0.14890980235307166,0.16108272781228866,-0.24087325973499432,0.35388938922795393,-0.16472246593088993,0.32843119647408037,0.0088231818672113906,0.24613819459038405,-0.21174104445079409,0.32634663681213644,-0.07811903716267049,0.32315438856778744,-0.071347461315895588,0.32448011346514083,-0.25556786283702437,0.19463015497110336,-0.30156894533531353,0.29379767124306572,-0.066482030204020923,0.39941282722113253,-0.10353152379599041,0.39502348417089445,-0.078829051752846532,0.29007018982070365,-0.12751268630357826,0.33638115065418955,-0.067544869330694285,1],\"text\":[1,-0.23000000000000001,1,0.34000000000000002,-0.089999999999999997,1,-0.12,0.37,0.029999999999999999,1,0.25,-0.14000000000000001,0.34999999999999998,0.040000000000000001,1,-0.089999999999999997,0.19,-0.059999999999999998,0.12,0.01,1,0.23000000000000001,-0.23000000000000001,0.28999999999999998,-0.11,0.27000000000000002,-0.040000000000000001,1,-0.17000000000000001,0.22,-0.14999999999999999,0.23000000000000001,-0.10000000000000001,0.080000000000000002,-0.089999999999999997,1,0.28999999999999998,-0.23999999999999999,0.51000000000000001,-0.14999999999999999,0.28000000000000003,-0.10000000000000001,0.37,-0.14999999999999999,1,-0.12,0.27000000000000002,-0.080000000000000002,0.089999999999999997,-0.089999999999999997,0.23000000000000001,-0.059999999999999998,0.13,-0.070000000000000007,1,0.14000000000000001,-0.080000000000000002,0.19,-0.17000000000000001,0.089999999999999997,0.070000000000000007,0.11,-0.17000000000000001,0.20000000000000001,0.080000000000000002,1,-0.20999999999999999,0.34000000000000002,-0.19,0.26000000000000001,-0.14000000000000001,0.089999999999999997,-0.19,0.28000000000000003,-0.20000000000000001,0.16,-0.17000000000000001,1,0.28000000000000003,-0.32000000000000001,0.080000000000000002,-0.27000000000000002,0.070000000000000007,-0.070000000000000007,0.10000000000000001,-0.12,0.17000000000000001,-0.12,-0.040000000000000001,-0.20999999999999999,1,-0.13,0.34000000000000002,-0.089999999999999997,0.27000000000000002,-0.050000000000000003,0.12,-0.13,0.20999999999999999,-0.17999999999999999,0.12,-0.080000000000000002,0.31,-0.20999999999999999,1,0.29999999999999999,-0.01,0.40999999999999998,-0.01,0.37,-0.02,0.28999999999999998,-0.14000000000000001,0.37,-0.02,0.20000000000000001,-0.14999999999999999,0.02,0.02,1,-0.17999999999999999,0.40000000000000002,-0.14000000000000001,0.34000000000000002,-0.050000000000000003,0.070000000000000007,-0.14999999999999999,0.27000000000000002,-0.23999999999999999,0.13,-0.17999999999999999,0.31,-0.27000000000000002,0.39000000000000001,-0.040000000000000001,1,0.25,-0.12,0.39000000000000001,-0.070000000000000007,0.34000000000000002,-0.070000000000000007,0.34999999999999998,-0.12,0.48999999999999999,-0.070000000000000007,0.14000000000000001,-0.13,0.13,-0.10000000000000001,0.34999999999999998,-0.14000000000000001,1,-0.070000000000000007,0.22,0,0.16,0,0.22,-0.050000000000000003,0.080000000000000002,-0.050000000000000003,0.19,0.02,0.11,-0.080000000000000002,0.14999999999999999,0.01,0.17000000000000001,-0.01,1,0.22,-0.20000000000000001,0.23999999999999999,-0.19,0.11,-0.070000000000000007,0.16,-0.20999999999999999,0.28999999999999998,-0.070000000000000007,0.17000000000000001,-0.22,0.22,-0.20999999999999999,0.23999999999999999,-0.25,0.23999999999999999,-0.040000000000000001,1,-0.26000000000000001,0.44,-0.20999999999999999,0.31,-0.14000000000000001,0.26000000000000001,-0.20000000000000001,0.27000000000000002,-0.25,0.27000000000000002,-0.10000000000000001,0.33000000000000002,-0.27000000000000002,0.34000000000000002,-0.13,0.37,-0.17000000000000001,0.26000000000000001,-0.29999999999999999,1,0.16,-0.13,0.17000000000000001,-0.17000000000000001,0.12,-0.01,0.13,-0.77000000000000002,0.14000000000000001,-0.070000000000000007,0.17999999999999999,-0.23000000000000001,0.10000000000000001,-0.14000000000000001,0.17999999999999999,-0.20000000000000001,0.14000000000000001,-0.02,0.20999999999999999,-0.19,1,-0.17000000000000001,0.26000000000000001,-0.12,0.34999999999999998,-0.059999999999999998,0.13,-0.11,0.28999999999999998,-0.17999999999999999,0.11,-0.14000000000000001,0.28000000000000003,-0.23000000000000001,0.28000000000000003,-0.10000000000000001,0.29999999999999999,-0.11,0.14999999999999999,-0.26000000000000001,0.33000000000000002,-0.23000000000000001,1,0.11,0.01,0.23000000000000001,-0.02,0.16,0.029999999999999999,0.17000000000000001,0,0.20999999999999999,0.059999999999999998,0.10000000000000001,-0.080000000000000002,0.040000000000000001,-0,0.28000000000000003,-0.01,0.17999999999999999,0.070000000000000007,0.17000000000000001,-0.029999999999999999,0.050000000000000003,-0.029999999999999999,1,-0.22,0.32000000000000001,-0.11,0.20999999999999999,-0.080000000000000002,0.14000000000000001,-0.10000000000000001,0.20000000000000001,-0.22,0.17000000000000001,-0.029999999999999999,0.20000000000000001,-0.28000000000000003,0.20000000000000001,-0.040000000000000001,0.23999999999999999,-0.14000000000000001,0.14999999999999999,-0.19,0.28000000000000003,-0.16,0.19,-0.02,1,0.28000000000000003,-0.34000000000000002,0.32000000000000001,-0.14999999999999999,0.28000000000000003,-0.20000000000000001,0.22,-0.12,0.33000000000000002,-0.22,0.050000000000000003,-0.17999999999999999,0.20999999999999999,-0.14999999999999999,0.23000000000000001,-0.20999999999999999,0.34000000000000002,-0.13,0.20000000000000001,-0.33000000000000002,0.11,-0.16,0.11,-0.14000000000000001,1,-0.12,0.31,-0.089999999999999997,0.28000000000000003,-0.029999999999999999,0.11,-0.12,0.22,-0.16,0.12,-0.11,0.26000000000000001,-0.17999999999999999,0.41999999999999998,-0.070000000000000007,0.34000000000000002,-0.12,0.14999999999999999,-0.25,0.35999999999999999,-0.14999999999999999,0.28999999999999998,-0.02,0.16,-0.13,1,0.25,-0.089999999999999997,0.32000000000000001,-0.050000000000000003,0.31,-0.040000000000000001,0.20000000000000001,-0.14999999999999999,0.29999999999999999,-0.059999999999999998,0.14000000000000001,-0.17999999999999999,0.10000000000000001,-0.059999999999999998,0.42999999999999999,-0.089999999999999997,0.31,0.040000000000000001,0.25,-0.17000000000000001,0.17000000000000001,-0.11,0.20000000000000001,-0.089999999999999997,0.23999999999999999,-0.050000000000000003,1,-0.13,0.34000000000000002,-0.10000000000000001,0.29999999999999999,-0.080000000000000002,0.17999999999999999,-0.13,0.19,-0.17999999999999999,0.27000000000000002,-0.089999999999999997,0.28000000000000003,-0.17000000000000001,0.28999999999999998,-0.080000000000000002,0.31,-0.13,0.23000000000000001,-0.17999999999999999,0.34999999999999998,-0.12,0.26000000000000001,-0.01,0.17999999999999999,-0.20999999999999999,0.34999999999999998,-0.050000000000000003,1,0.27000000000000002,-0.089999999999999997,0.42999999999999999,0.02,0.25,-0.059999999999999998,0.17999999999999999,-0.13,0.28999999999999998,-0.080000000000000002,0.11,-0.17000000000000001,0.089999999999999997,-0.080000000000000002,0.29999999999999999,-0.080000000000000002,0.26000000000000001,0.040000000000000001,0.19,-0.17000000000000001,0.16,-0.10000000000000001,0.17999999999999999,-0.11,0.25,-0.070000000000000007,0.31,-0.059999999999999998,1,-0.17999999999999999,0.41999999999999998,-0.11,0.27000000000000002,-0.089999999999999997,0.14000000000000001,-0.14999999999999999,0.27000000000000002,-0.17000000000000001,0.22,-0.050000000000000003,0.28999999999999998,-0.32000000000000001,0.31,-0,0.32000000000000001,-0.089999999999999997,0.14999999999999999,-0.19,0.37,-0.20000000000000001,0.28000000000000003,-0,0.28999999999999998,-0.20999999999999999,0.28000000000000003,-0.059999999999999998,0.27000000000000002,-0.080000000000000002,1,0.23000000000000001,-0.27000000000000002,0.23000000000000001,-0.14999999999999999,0.20000000000000001,-0.059999999999999998,0.20999999999999999,-0.22,0.17999999999999999,-0.14000000000000001,0.16,-0.32000000000000001,0.17999999999999999,-0.22,0.20999999999999999,-0.23999999999999999,0.17999999999999999,-0.070000000000000007,0.23000000000000001,-0.28000000000000003,0.22,-0.23000000000000001,0.059999999999999998,-0.14999999999999999,0.22,-0.22,0.20999999999999999,-0.20000000000000001,0.22,-0.22,1,-0.11,0.34999999999999998,-0.14999999999999999,0.20999999999999999,-0.080000000000000002,0.12,-0.14000000000000001,0.070000000000000007,-0.34000000000000002,0.029999999999999999,-0.070000000000000007,0.20000000000000001,-0.16,0.20999999999999999,-0.029999999999999999,0.23999999999999999,-0.11,0.13,-0.19,0.22,-0.040000000000000001,0.17000000000000001,-0.14000000000000001,0.32000000000000001,-0.16,0.14999999999999999,-0.050000000000000003,0.16,-0.070000000000000007,0.20999999999999999,-0.040000000000000001,1,0.17999999999999999,-0.28000000000000003,0.17000000000000001,-0.16,0.14999999999999999,-0.029999999999999999,0.17000000000000001,-0.20999999999999999,0.14999999999999999,-0.10000000000000001,0.080000000000000002,-0.28999999999999998,0.23999999999999999,-0.23999999999999999,0.16,-0.22,0.16,-0.070000000000000007,0.20999999999999999,-0.25,0.20999999999999999,-0.22,0.050000000000000003,-0.13,0.14999999999999999,-0.23000000000000001,0.17000000000000001,-0.17999999999999999,0.17000000000000001,-0.25,0.39000000000000001,-0.059999999999999998,1,-0.14999999999999999,0.32000000000000001,-0.12,0.32000000000000001,-0.080000000000000002,0.089999999999999997,-0.14000000000000001,0.17999999999999999,-0.22,0.059999999999999998,-0.14999999999999999,0.28000000000000003,-0.23999999999999999,0.28999999999999998,-0.059999999999999998,0.34000000000000002,-0.12,0.12,-0.23000000000000001,0.31,-0.14000000000000001,0.37,-0.13,0.17000000000000001,-0.16,0.26000000000000001,-0.080000000000000002,0.23000000000000001,-0.080000000000000002,0.28000000000000003,-0.14999999999999999,0.32000000000000001,-0.14000000000000001,1,0.35999999999999999,-0.14999999999999999,0.41999999999999998,0.040000000000000001,0.28000000000000003,-0.029999999999999999,0.25,-0.16,0.31,-0.089999999999999997,0.12,-0.17999999999999999,0.23000000000000001,-0.089999999999999997,0.29999999999999999,-0.14999999999999999,0.29999999999999999,0,0.19,-0.20000000000000001,0.17999999999999999,-0.089999999999999997,0.14999999999999999,-0.13,0.26000000000000001,-0.080000000000000002,0.27000000000000002,-0.080000000000000002,0.40000000000000002,-0.17000000000000001,0.27000000000000002,-0.050000000000000003,0.20999999999999999,-0.059999999999999998,1,-0.17999999999999999,0.32000000000000001,-0.12,0.32000000000000001,-0.11,0.059999999999999998,-0.16,0.31,-0.14000000000000001,0.14000000000000001,-0.16,0.29999999999999999,-0.25,0.28000000000000003,-0.13,0.34999999999999998,-0.13,0.13,-0.23000000000000001,0.32000000000000001,-0.25,0.34000000000000002,-0,0.22,-0.13,0.31,-0.089999999999999997,0.27000000000000002,-0.070000000000000007,0.28999999999999998,-0.32000000000000001,0.12,-0.31,0.28999999999999998,-0.10000000000000001,1,0.23999999999999999,-0.20000000000000001,0.28000000000000003,-0.20000000000000001,0.17000000000000001,0.01,0.25,-0.17999999999999999,0.28000000000000003,0.029999999999999999,0.26000000000000001,-0.23000000000000001,0.14000000000000001,-0.14000000000000001,0.17000000000000001,-0.28000000000000003,0.17999999999999999,-0.029999999999999999,0.14999999999999999,-0.17999999999999999,0.17999999999999999,-0.17000000000000001,0.14999999999999999,-0.10000000000000001,0.16,-0.13,0.12,-0.12,0.17000000000000001,-0.13,0.20999999999999999,-0.17999999999999999,0.12,-0.17999999999999999,0.28999999999999998,-0.17999999999999999,1,-0.14000000000000001,0.31,-0.089999999999999997,0.45000000000000001,-0.02,0.059999999999999998,-0.13,0.31,-0.19,0.089999999999999997,-0.17999999999999999,0.31,-0.23000000000000001,0.32000000000000001,-0.10000000000000001,0.39000000000000001,-0.11,0.13,-0.28000000000000003,0.35999999999999999,-0.25,0.42999999999999999,-0.059999999999999998,0.22,-0.14999999999999999,0.38,-0.11,0.33000000000000002,-0.070000000000000007,0.28999999999999998,-0.20000000000000001,0.20000000000000001,-0.22,0.39000000000000001,-0.050000000000000003,0.40000000000000002,-0.14999999999999999,1,0.34000000000000002,-0.13,0.58999999999999997,-0.029999999999999999,0.31,-0.080000000000000002,0.27000000000000002,-0.16,0.44,-0.089999999999999997,0.20999999999999999,-0.20000000000000001,0.14000000000000001,-0.10000000000000001,0.40999999999999998,-0.13,0.35999999999999999,0.02,0.25,-0.23000000000000001,0.19,-0.14000000000000001,0.26000000000000001,-0.13,0.31,-0.11,0.38,-0.10000000000000001,0.55000000000000004,-0.14000000000000001,0.25,-0.10000000000000001,0.19,-0.14000000000000001,0.48999999999999999,-0.10000000000000001,0.26000000000000001,-0.080000000000000002,1,-0.11,0.33000000000000002,-0.089999999999999997,0.27000000000000002,-0.050000000000000003,0.02,-0.14000000000000001,0.20999999999999999,-0.17000000000000001,0.050000000000000003,-0.13,0.31,-0.20999999999999999,0.68000000000000005,-0.02,0.40000000000000002,-0.089999999999999997,0.089999999999999997,-0.23000000000000001,0.28999999999999998,-0.16,0.27000000000000002,-0.040000000000000001,0.17999999999999999,-0.080000000000000002,0.40999999999999998,-0.070000000000000007,0.26000000000000001,-0.070000000000000007,0.31,-0.23000000000000001,0.19,-0.28000000000000003,0.28999999999999998,-0.10000000000000001,0.32000000000000001,-0.20000000000000001,0.34000000000000002,-0.080000000000000002,1,0.22,-0.20000000000000001,0.25,-0.070000000000000007,0.19,-0.080000000000000002,0.13,-0.11,0.17999999999999999,-0.14000000000000001,0.070000000000000007,-0.14999999999999999,0.19,-0.01,0.17999999999999999,-0.10000000000000001,0.20000000000000001,0.040000000000000001,0.14000000000000001,-0.20000000000000001,0.12,-0.070000000000000007,0.14000000000000001,-0.13,0.34000000000000002,-0.02,0.20999999999999999,-0.070000000000000007,0.25,-0.17000000000000001,0.19,-0.080000000000000002,0.14000000000000001,-0.10000000000000001,0.26000000000000001,-0.10000000000000001,0.14000000000000001,-0.080000000000000002,0.29999999999999999,0.01,1,-0.12,0.31,-0.080000000000000002,0.34999999999999998,-0.070000000000000007,0.14000000000000001,-0.11,0.20000000000000001,-0.14000000000000001,0.20000000000000001,-0.089999999999999997,0.28000000000000003,-0.19,0.26000000000000001,-0.080000000000000002,0.28000000000000003,-0.10000000000000001,0.14999999999999999,-0.17000000000000001,0.32000000000000001,-0.14999999999999999,0.25,-0.040000000000000001,0.17000000000000001,-0.20000000000000001,0.27000000000000002,-0.080000000000000002,0.34999999999999998,-0.050000000000000003,0.26000000000000001,-0.19,0.14999999999999999,-0.20000000000000001,0.20999999999999999,-0.02,0.25,-0.12,0.33000000000000002,-0.059999999999999998,0.23999999999999999,-0.089999999999999997,1,0.25,-0.089999999999999997,0.33000000000000002,-0.040000000000000001,0.31,-0.040000000000000001,0.20999999999999999,-0.14000000000000001,0.31,-0.059999999999999998,0.14000000000000001,-0.17999999999999999,0.10000000000000001,-0.070000000000000007,0.44,-0.089999999999999997,0.31,0.029999999999999999,0.25,-0.17000000000000001,0.17000000000000001,-0.11,0.20999999999999999,-0.089999999999999997,0.23000000000000001,-0.070000000000000007,0.96999999999999997,-0.059999999999999998,0.32000000000000001,-0.059999999999999998,0.20999999999999999,-0.050000000000000003,0.17999999999999999,-0.080000000000000002,0.28000000000000003,-0.089999999999999997,0.12,-0.11,0.40000000000000002,-0.070000000000000007,0.22,-0.059999999999999998,1,-0.19,0.40000000000000002,-0.080000000000000002,0.38,-0.10000000000000001,0.13,-0.13,0.23000000000000001,-0.17000000000000001,0.17000000000000001,-0.089999999999999997,0.28000000000000003,-0.31,0.28999999999999998,-0.059999999999999998,0.33000000000000002,-0.14999999999999999,0.16,-0.23999999999999999,0.34999999999999998,-0.16,0.33000000000000002,0.01,0.25,-0.20999999999999999,0.33000000000000002,-0.080000000000000002,0.32000000000000001,-0.070000000000000007,0.32000000000000001,-0.26000000000000001,0.19,-0.29999999999999999,0.28999999999999998,-0.070000000000000007,0.40000000000000002,-0.10000000000000001,0.40000000000000002,-0.080000000000000002,0.28999999999999998,-0.13,0.34000000000000002,-0.070000000000000007,1],\"zmin\":-1,\"zmax\":1,\"type\":\"heatmap\",\"xaxis\":\"x\",\"yaxis\":\"y\",\"frame\":null}],\"highlight\":{\"on\":\"plotly_click\",\"persistent\":false,\"dynamic\":false,\"selectize\":false,\"opacityDim\":0.20000000000000001,\"selected\":{\"opacity\":1},\"debounce\":0},\"shinyEvents\":[\"plotly_hover\",\"plotly_click\",\"plotly_selected\",\"plotly_relayout\",\"plotly_brushed\",\"plotly_brushing\",\"plotly_clickannotation\",\"plotly_doubleclick\",\"plotly_deselect\",\"plotly_afterplot\",\"plotly_sunburstclick\"],\"base_url\":\"https://plot.ly\"},\"evals\":[],\"jsHooks\":[]}</script>\n```\n\n:::\n:::\n\n\nItems with high correlation are candidates for merging or dropping. There are two cells with colors dark red or dark blue in the heatmap. Q21 and Q8 have negative high correlation (.77) and Q43 and Q27 has positive high correlation (.97). We can consider dropping one variable from each pair. Let's see the values of these cells:\n\n\n::: {.cell code_folding='false'}\n\n```{.r .cell-code  code-fold=\"false\"}\npoly_matrix[8, 21]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] -0.7707296\n```\n\n\n:::\n\n```{.r .cell-code  code-fold=\"false\"}\npoly_matrix[27, 43]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.9671933\n```\n\n\n:::\n:::\n\n\nRemoving one of the variables from each pair is a common practice in EFA. We will drop Q21 and Q43. Then, create the polychoric matrix again.\n\n\n::: {.cell code_folding='false'}\n\n```{.r .cell-code  code-fold=\"false\"}\ndf <- df %>% select(-Q21, -Q43)\npoly_matrix <- polychoric(df)$rho\n```\n:::\n\n\n### Sampling Adequacy with KMO\n\nNow, let's check the sampling adequacy with KMO test. We expect each varianle's KMO value to be above .60. Also, the overall KMO value should be be above .60 too.\n\n\n::: {.cell code_folding='false'}\n\n```{.r .cell-code  code-fold=\"false\"}\nKMO(poly_matrix)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nKaiser-Meyer-Olkin factor adequacy\nCall: KMO(r = poly_matrix)\nOverall MSA =  0.93\nMSA for each item = \n  Q1   Q2   Q3   Q4   Q5   Q6   Q7   Q8   Q9  Q10  Q11  Q12  Q13  Q14  Q15  Q16 \n0.95 0.94 0.93 0.93 0.92 0.85 0.94 0.95 0.92 0.88 0.88 0.97 0.91 0.87 0.91 0.97 \n Q17  Q18  Q19  Q20  Q22  Q23  Q24  Q25  Q26  Q27  Q28  Q29  Q30  Q31  Q32  Q33 \n0.92 0.90 0.96 0.97 0.96 0.88 0.93 0.93 0.96 0.93 0.95 0.92 0.96 0.95 0.86 0.94 \n Q34  Q35  Q36  Q37  Q38  Q39  Q40  Q41  Q42  Q44 \n0.95 0.93 0.96 0.91 0.95 0.91 0.87 0.92 0.96 0.96 \n```\n\n\n:::\n:::\n\n\n### Sphericity with Bartlett's Test\n\nNow, let's check the sphericity with Bartlett's Test. We expect the p-value to be less than .05.\n\n\n::: {.cell code_folding='false'}\n\n```{.r .cell-code  code-fold=\"false\"}\ncortest.bartlett(poly_matrix, n = nrow(df))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$chisq\n[1] 319501.8\n\n$p.value\n[1] 0\n\n$df\n[1] 861\n```\n\n\n:::\n:::\n\n\nAs, the assumptions we tested are fulfilled, we can continue with the\n\n## Determine the number of factors\n\nWhile determining the number of factors to extract, there are many methods that can be used. See a summary of them in Zwick et.al. (1986). Some of the most common methods are: \n\n**1. Kaiser Criterion (K1):** we can use the Kaiser criterion, which suggests retaining factors with eigenvalues greater than 1. \n\n**2. Paralell Analysis:** This is a simulation-based method that compares the observed eigenvalues with the eigenvalues obtained from random data. The factors with eigenvalues greater than the random data are retained in this approach. \n\n**3. Very Simple Structure (VSS):** VSS criterion evaluates how well a simplified factor pattern reproduces the original correlation matrix. In this simplified pattern, only the highest loading for each item is kept, while all other loadings are set to zero. The VSS score, ranging from 0 to 1, measures the goodness-of-fit of the factor solution. This evaluation is conducted for solutions with varying numbers of factors, starting from one (k = 1) up to a user-defined maximum. The optimal number of factors is determined by the solution with the highest VSS score. \n\n**4. Minimum Average Partial (MAP):** This method is based on partial correlations matrix. It is very similar to Principal Component Analysis (PCA).\n\nIn order to implement Kaiser Criterion, we simply run the following code.\n\n\n::: {.cell code_folding='false'}\n\n```{.r .cell-code  code-fold=\"false\"}\nscree(poly_matrix, pc = FALSE)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\nThe produced plot suggests 2 or 3 factors. To be more certain, we can run the parallel analysis with the same scree plot with the following code:\n\n\n::: {.cell code_folding='false'}\n\n```{.r .cell-code  code-fold=\"false\"}\nfa.parallel(\n  poly_matrix, \n  n.obs = nrow(df),\n  fa = \"fa\", \n  fm = \"pa\", \n  cor = \"poly\",\n  n.iter = 20,\n  show.legend = FALSE \n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nParallel analysis suggests that the number of factors =  12  and the number of components =  NA \n```\n\n\n:::\n\n```{.r .cell-code  code-fold=\"false\"}\nabline(h = 1, col = \"green\", lty = 2) \n\nlegend(\"topright\", \n       legend = c(\"Actual Data\", \"K1 Criterion\", \"Parallel analysis\"), \n       col = c(\"blue\", \"green\", \"red\"), \n       lty = c(1, 2, 3), \n       pch = c(24, NA, NA), \n       bty = \"n\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\nHowever, parallel analysis suggests 12 factors which is not reasonable. Let's try VSS and MAP too. These can be obtained from `nfactor()` function of `psych` package.\n\n\n::: {.cell code_folding='false'}\n\n```{.r .cell-code  code-fold=\"false\"}\nvss_complexity <- nfactors(poly_matrix, n.obs = nrow(df), fm = \"pa\", cor = \"poly\", SMC=FALSE)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\nThe output actually speaks for itself. To better understand this, let's have a look at the plots produced with the function. The plot on the upper left corner shows the VSS fit values with the number of factors. As can be seen 2 and 3 factors are very close and they are higher than 1 factor. This is in alignment with the K1 criterion.\n\nThe plot on the upper right corner shows the complexity of the construct with the number of factors. Complexity increases as the number of factors increase until 12 factors. We do not want to go with a high number of factors, so this plot also supports our decision to ignore parallel analysis too.\n\nThe plot on the lower left corner shows the Empirical BIC values with the number of factors. BIC value decreases highest from 1 to 2 factors. But from 2 to 3, the decrease is not so eye-catching.\n\nAs for the plot on the lower right corner, it shows the RMR values with the number of factors. RMRs below 0.10 is acceptable while below 0.08 is desirable. Any model that has more than 1 factor has RMR below 0.08 in the plot.\n\nIn conclusion, we can say that 2 or 3 factors are reasonable, while the first is a little more preferable. For our final decision, we can also check the variance explained by two models. If there is not much increase from 2-factor model to 3-factor model, we can go with 2 factors.\n\n\n::: {.cell code_folding='false'}\n\n```{.r .cell-code  code-fold=\"false\"}\ntwo_fm <- fa(poly_matrix, n.obs = nrow(df), nfactors = 2, fm = \"pa\", rotate = \"none\", cor = \"poly\", SMC=FALSE)\nthree_fm <- fa(poly_matrix, n.obs = nrow(df), nfactors = 3, fm = \"pa\", rotate = \"none\", cor = \"poly\", SMC=FALSE)\n#Explained Variance by 2-Factor Model:\ntwo_fm$Vaccounted\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                            PA1       PA2\nSS loadings           8.1762800 3.2680913\nProportion Var        0.1946733 0.0778117\nCumulative Var        0.1946733 0.2724850\nProportion Explained  0.7144368 0.2855632\nCumulative Proportion 0.7144368 1.0000000\n```\n\n\n:::\n\n```{.r .cell-code  code-fold=\"false\"}\n#Explained Variance by 3-Factor Model:\nthree_fm$Vaccounted\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                            PA1       PA2        PA3\nSS loadings           8.1985977 3.2818970 1.08421360\nProportion Var        0.1952047 0.0781404 0.02581461\nCumulative Var        0.1952047 0.2733451 0.29915972\nProportion Explained  0.6525100 0.2611996 0.08629039\nCumulative Proportion 0.6525100 0.9137096 1.00000000\n```\n\n\n:::\n:::\n\n\nThe variance explained cumulatively by the 2-factor model is 0.27 while the 3-factor model explains 0.30. The increase is not so high, so we can go with the 2-factor model.\n\n## Rotation\n\nTo see if we need to rotate, we can check the factor loadings. If the loadings are high and clear, we can go without rotation. Let's see the loadings for the 2-factor model.\n\n\n::: {.cell code_folding='false'}\n\n```{.r .cell-code  code-fold=\"false\"}\nfactor_loadings <- two_fm$loadings\nprint(head(factor_loadings)) #use the following for all variables:  print(factor_loadings)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n          PA1        PA2\nQ1 -0.4532517 0.25125939\nQ2  0.5952802 0.25000562\nQ3 -0.4598388 0.55066466\nQ4  0.4588183 0.35760922\nQ5 -0.3225258 0.38951608\nQ6  0.2084623 0.08448999\n```\n\n\n:::\n:::\n\n\nThe loadings are not so clear. Some of the observed variables load on both factors highly and equally such as Q3, Q4, Q5 etc. We can try to rotate the factors.\n\nRotation does not change the underlying solution but redistributes the variance to simplify the interpretation of factor loadings.\n\nIt is typically used when you expect that each variable primarily loads on one factor, and you want to make those relationships clearer.\n\nRotation is a technique used to simplify the factor structure. It is used to make the factors more interpretable. There are two types of rotation: orthogonal and oblique. Orthogonal rotation assumes that the factors are uncorrelated, while oblique rotation allows the factors to be correlated.\n\nIn contemporary research, oblique rotation is more commonly used, particularly in fields like psychology, sociology, and behavioral sciences, where correlated factors are expected. While orthogonal rotation is still used in cases where independence among factors is assumed or desired, the realistic nature of oblique rotations makes them the preferred choice for most exploratory factor analysis (EFA) applications.\n\nThere are many rotation methods such as varimax, promax, oblimin, and quartimin.\n\nLet's rotate the factors with oblimin:\n\n\n::: {.cell code_folding='false'}\n\n```{.r .cell-code  code-fold=\"false\"}\ntwo_fm <- fa(poly_matrix, n.obs = nrow(df), nfactors = 2, fm = \"pa\", rotate = \"oblimin\", cor = \"poly\", SMC=FALSE)\n\n\nfactor_loadings_rotated <- two_fm$loadings\nprint(head(factor_loadings_rotated))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n           PA1         PA2\nQ1 -0.16698240  0.44127564\nQ2  0.63696320 -0.02629649\nQ3  0.04356274  0.72980540\nQ4  0.60970090  0.13704242\nQ5  0.03292070  0.51501188\nQ6  0.22085587 -0.01212766\n```\n\n\n:::\n:::\n\n\nThe loadings are now more clear. Also, we can see that some of the variables load neither of the variables. This is a common situation in EFA. This also explains why a 3-factor model is also strong. Yet, we prefer 2-factor model so We can drop these variables one by one and re-run the analysis. To determine with which item to start, we can check the communalities of the variables.\n\n\n::: {.cell code_folding='false'}\n\n```{.r .cell-code  code-fold=\"false\"}\nfactor_1 <- as.matrix(two_fm$loadings[,\"PA1\"])\nfactor_2 <- as.matrix(two_fm$loadings[,\"PA2\"])\ncommunalities <- two_fm$communality\n\n# merge as a table\nloadings <- data.frame(\n  factor_1 = factor_1,\n  factor_2 = factor_2,\n  communalities = communalities\n)\nloadings <- loadings[order(loadings$communalities, decreasing = FALSE),]\nprint(head(loadings, 10)) # use print(loadings) to see all variables\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n       factor_1    factor_2 communalities\nQ6   0.22085587 -0.01212766    0.05059508\nQ11 -0.12298253  0.21681114    0.07876337\nQ10  0.27005620 -0.03300168    0.07957850\nQ18  0.32004233  0.10727368    0.09252015\nQ23  0.07002200  0.35815591    0.11753590\nQ32  0.33746578 -0.07831434    0.13650095\nQ41 -0.06846225  0.37184011    0.15883090\nQ37 -0.19601538  0.30838271    0.17122609\nQ24  0.38433571 -0.07601277    0.17171431\nQ8   0.38663998 -0.10503405    0.18585326\n```\n\n\n:::\n:::\n\n\n### Final Solution\n\nIn EFA, we do not want communalities lower than .30. Also loadings lower than .30 are not considered as strong. Preferably, loadings above .40 are considered strong.\n\nDropping variables is an iterative practice. You need to drop one variable, re-run the analysis, check the loadings and communalities, and decide if you need to drop another variable. This process continues until all variables have strong loadings and communalities. Thus, I will report only the final solution here.\n\nFollowing line of code will drop all the unwanted variables, and then re-run the 2-factor model with oblimin rotation:\n\n\n::: {.cell code_folding='false'}\n\n```{.r .cell-code  code-fold=\"false\"}\ndf <- df %>% select(\n  -Q6, -Q11, -Q10, -Q18, -Q23, -Q32, -Q37, -Q41, \n  -Q24, -Q8, -Q13, -Q33, -Q7, -Q19, -Q31, -Q42, \n  -Q25, -Q34, -Q28, -Q5, -Q1, -Q12, -Q27, -Q30, -Q22\n  )\n\n\npoly_matrix <- polychoric(df)$rho\n\ntwo_fm <- fa(poly_matrix, nfactors = 2, fm = \"pa\", rotate = \"oblimin\", cor = \"poly\", SMC=FALSE)\n#Factor Loadings:\nprint(two_fm$loadings, cutoff = 0.4)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nLoadings:\n    PA1    PA2   \nQ2   0.592       \nQ3          0.756\nQ4   0.585       \nQ9          0.587\nQ14  0.638       \nQ15         0.558\nQ16  0.610       \nQ17         0.523\nQ20  0.544       \nQ26  0.582       \nQ29         0.600\nQ35         0.589\nQ36  0.547       \nQ38  0.626       \nQ39         0.788\nQ40  0.637       \nQ44  0.589       \n\n                 PA1   PA2\nSS loadings    3.587 2.878\nProportion Var 0.211 0.169\nCumulative Var 0.211 0.380\n```\n\n\n:::\n\n```{.r .cell-code  code-fold=\"false\"}\n# Communalities:\nprint(two_fm$communality, cutoff = 0.3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n       Q2        Q3        Q4        Q9       Q14       Q15       Q16       Q17 \n0.3615579 0.5625665 0.3221763 0.4227183 0.3981835 0.3002707 0.3874601 0.2982325 \n      Q20       Q26       Q29       Q35       Q36       Q38       Q39       Q40 \n0.3665253 0.3399021 0.3515497 0.3474944 0.3071188 0.3870429 0.6124040 0.3960493 \n      Q44 \n0.3446296 \n```\n\n\n:::\n:::\n\n\nWith this, our explained cumulative variance has risen to 38%. Let's see factor correlations and the reliability score of the scale:\n\n::: {.cell code_folding='false'}\n\n```{.r .cell-code  code-fold=\"false\"}\n#Factor Correlations:\nround(two_fm$Phi, 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n      PA1   PA2\nPA1  1.00 -0.24\nPA2 -0.24  1.00\n```\n\n\n:::\n\n```{.r .cell-code  code-fold=\"false\"}\nreliability_coef <- psych::alpha(poly_matrix, check.keys=TRUE)\n#Ordinal Alpha:\nprint(round(reliability_coef[[\"total\"]][[\"raw_alpha\"]], 2))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.84\n```\n\n\n:::\n:::\n\nCorrelation between factors is -0.24, which indicates a very low and negative correlation.\nThe ordinal alpha coefficient is 0.84 which is considered as good. The 2-factor model with oblimin rotation is our final solution. Finally let's draw the path diagram of the model:\n\n::: {.cell code_folding='false'}\n\n```{.r .cell-code  code-fold=\"false\"}\nfa.diagram(\n  two_fm, \n  digits = 2,\n  main = \"Final Solution for Open Sex Role Inventory\",\n  e.size=.07,\n  rsize=.1,\n  cex=0.9)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-18-1.png){width=672}\n:::\n:::\n\n\n\nThe final solution has 10 items in the first factor and 7 items in the second factor. Here are the items in each factor:\n\n| Factor 1                                                                  | Factor 2                                                                 |\n|------------------------------------|------------------------------------|\n| Q2 I have thought about dying my hair.                                    | Q3 I have thrown knives, axes or other sharp things.                     |\n| Q4 I give people handmade gifts.                                          | Q9 I like guns.                                                          |\n| Q14 I dance when I am alone.                                              | Q15 I have thought it would be exciting to be an outlaw.                 |\n| Q16 When I was a child, I put on fake concerts and plays with my friends. | Q17 I have considered joining the military.                              |\n| Q20 I sometimes feel like crying when I get angry.                        | Q29 I have burned things up with a magnifying glass.                     |\n| Q26 I jump up and down in excitement sometimes.                           | Q35 I have taken apart machines just to see how they work.               |\n| Q36 I take lots of pictures of my activities.                             | Q39 I have set fuels, aerosols or other chemicals on fire, just for fun. |\n| Q38 I leave nice notes for people now and then.                           |                                                                          |\n| Q40 I really like dancing.                                                |                                                                          |\n| Q44 I decorate my things (e.g. stickers on laptop).                       |                                                                          |\n\nIt is pretty easy now to interpret the factors given that this is a scale named as Open Sex Role Inventory. The first factor seems to be related to femininity while the second factor seems to be related to masculinity. \n\nAs a final touch, let's see the scree plot of the genders of the participants along with their scores on the two factors; **masculinity** and **femininity**. We will use `factor.scores()` to calculate participants' scores and the `ggplot2` package for visualization:\n\n\n::: {.cell code_folding='false'}\n\n```{.r .cell-code  code-fold=\"false\"}\nlibrary(ggplot2)\nOSRI_scores <- factor.scores(df, two_fm)$scores\ncolnames(OSRI_scores) <- c(\"Femininity\", \"Masculinity\")\nscores <- as_tibble(OSRI_scores)\nscores <- bind_cols(df_with_demographics |> select(gender), scores) |>\n  filter(gender %in% c(1, 2)) |>  \n  mutate(gender = factor(gender, labels = c(\"Male\", \"Female\")))  \n\n# Plot the filtered data\nscores |>\n  ggplot(aes(Femininity, Masculinity, color = gender)) +\n  geom_point() +\n  theme_minimal() +\n  theme(legend.position = \"bottom\") +\n  labs(color = \"Gender\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-19-1.png){width=672}\n:::\n:::\n\n\n## Conclusion\n\nIn this post, we have seen how to conduct an EFA with polychoric correlations and ordinal alpha coefficient. We have also seen how to check the assumptions of EFA, determine the number of factors, and rotate the factors. We have also seen how to drop variables iteratively to reach a final solution. Then, we have seen how to interpret the factors and draw the path diagram of the model. Finally, we have seen how to obtain and visualize the scores of the participants on the factors.\n\n## Further Remarks\n\n- The data used here is a likert scale data. Yet, EFA actually expects continuous variables. Therefore, it might be wiser to use IRT based factor reduction methods for likert scale data. We will discuss this in a later post.\n\n- The outliers should be checked and removed before running the EFA. Yet, we haven't done it here. Outlier detection is another topic for another post.",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../../site_libs/htmltools-fill-0.5.8.1/fill.css\" rel=\"stylesheet\" />\n<script src=\"../../site_libs/htmlwidgets-1.6.4/htmlwidgets.js\"></script>\n<script src=\"../../site_libs/plotly-binding-4.10.4/plotly.js\"></script>\n<script src=\"../../site_libs/typedarray-0.1/typedarray.min.js\"></script>\n<script src=\"../../site_libs/jquery-3.5.1/jquery.min.js\"></script>\n<link href=\"../../site_libs/crosstalk-1.2.1/css/crosstalk.min.css\" rel=\"stylesheet\" />\n<script src=\"../../site_libs/crosstalk-1.2.1/js/crosstalk.min.js\"></script>\n<link href=\"../../site_libs/plotly-htmlwidgets-css-2.11.1/plotly-htmlwidgets.css\" rel=\"stylesheet\" />\n<script src=\"../../site_libs/plotly-main-2.11.1/plotly-latest.min.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}