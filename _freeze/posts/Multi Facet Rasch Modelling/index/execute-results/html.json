{
  "hash": "9b44dc9d69f63f222c73edd0506f4ba4",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Multi-Facet Rasch Models with R\"\ndescription: |\n  In this post, we’ll explore the Multi-Facet Rasch Model, understand how it works, and demonstrate how to fit this model using R. We'll also visualize the results to better interpret them. \nauthor:\n  - name: Ali Emre Karagül\n    orcid: 0000-0002-5820-8643\n    email: aliemrekaragul@gmail.com\n    affiliations:\n      - name: TOBB ETU- University of Economics & Technology\ndate: 2024-10-17\ncategories: [readr, tidyr, ggplot2,dplyr,tam,cowplot\n  ]\nimage: \"image.png\"\noutput:\n    self_contained: false\n    code_folding: false\nexecute:\n  freeze: auto\n---\n\n\n## Introduction\n\nWhile a basic Rasch model focuses on item difficulty and person ability, the **Multi-Facet Rasch Model** (MFRM) allows us to incorporate additional factors, or facets, such as:\n\n-   **Person Ability** (e.g., the skill level of test-takers),\n\n-   **Item Difficulty** (e.g., how hard the test items are),\n\n-   **Rater Severity** (e.g., how lenient or strict raters are),\n\n-   **Task or Stimulus Differences** (e.g., variation in tasks given).\n\nMFRM is said to be IRT version of generalizability theory and it is particularly useful when assessments involve subjective judgments, like in essay grading or performance evaluation, where raters' subjectivity can introduce bias.\n\n::: {layout-ncol=\"2\"}\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\n# Load the libraries\nlibrary(readr)\nlibrary(tidyr)\nlibrary(ggplot2)\nlibrary(dplyr)\n\nlibrary(tidyverse)\nlibrary(TAM)\nlibrary(cowplot)\n```\n:::\n\n:::\n\n## 1. Understand the data\n\nFor MFRM analysis, we are going to use a dataset of essay scores scored on an analytical rubric. There are four domains of the rubric: Content, Prompt Adherence, Language, and Narrativity. Let's load the data and see the head of them. You can download the data for your own use from [here](https://drive.google.com/file/d/1cmfJd_h68J5JpBIPX6N-iISgESAVgvlI/view?usp=drive_link).\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\ndata <- read_csv(\"MFRM_data.csv\", show_col_types = FALSE)\nhead(data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 6\n    Con ProAd  Lang   Nar rater essayId\n  <dbl> <dbl> <dbl> <dbl> <dbl>   <dbl>\n1     4     4     3     3     1       1\n2     2     2     4     3     1       2\n3     4     4     4     4     1       3\n4     3     2     4     4     1       4\n5     4     4     4     4     1       5\n6     1     1     1     2     1       6\n```\n\n\n:::\n:::\n\n\nLet's see the structure and summary of the data too.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nstr(data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nspc_tbl_ [5,400 × 6] (S3: spec_tbl_df/tbl_df/tbl/data.frame)\n $ Con    : num [1:5400] 4 2 4 3 4 1 1 2 4 3 ...\n $ ProAd  : num [1:5400] 4 2 4 2 4 1 1 2 4 3 ...\n $ Lang   : num [1:5400] 3 4 4 4 4 1 1 4 4 4 ...\n $ Nar    : num [1:5400] 3 3 4 4 4 2 1 4 4 2 ...\n $ rater  : num [1:5400] 1 1 1 1 1 1 1 1 1 1 ...\n $ essayId: num [1:5400] 1 2 3 4 5 6 7 8 9 10 ...\n - attr(*, \"spec\")=\n  .. cols(\n  ..   Con = col_double(),\n  ..   ProAd = col_double(),\n  ..   Lang = col_double(),\n  ..   Nar = col_double(),\n  ..   rater = col_double(),\n  ..   essayId = col_double()\n  .. )\n - attr(*, \"problems\")=<externalptr> \n```\n\n\n:::\n\n```{.r .cell-code  code-fold=\"false\"}\nsummary(data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n      Con            ProAd            Lang            Nar            rater  \n Min.   :0.000   Min.   :0.000   Min.   :0.000   Min.   :0.000   Min.   :1  \n 1st Qu.:1.000   1st Qu.:1.000   1st Qu.:1.000   1st Qu.:1.000   1st Qu.:1  \n Median :2.000   Median :2.000   Median :2.000   Median :2.000   Median :2  \n Mean   :1.878   Mean   :1.784   Mean   :2.062   Mean   :1.958   Mean   :2  \n 3rd Qu.:3.000   3rd Qu.:3.000   3rd Qu.:3.000   3rd Qu.:3.000   3rd Qu.:3  \n Max.   :4.000   Max.   :4.000   Max.   :4.000   Max.   :4.000   Max.   :3  \n    essayId      \n Min.   :   1.0  \n 1st Qu.: 450.8  \n Median : 900.5  \n Mean   : 900.5  \n 3rd Qu.:1350.2  \n Max.   :1800.0  \n```\n\n\n:::\n:::\n\n\nThere are 1800 rows of data. Each domain is scored between 0 and 4. Perfect as zero must exist in the ordinal data for MFRM. The data set consists of scores from three raters on four domains, so we need to account for the three key facets: **person ability** (the essays), **item difficulty** (the domains), and **rater severity** (the three raters).\n\n## 2. Fit the model\n\nNow that we've explored our data set, it's time to fit the Multi-Facet Rasch Model (MFRM). To do this, we'll use the `TAM` package in R, which provides functions for fitting various Rasch models, including MFRM. The `formulaA` provided into the mfr function decides on the model. For PCM, we define interaction between item and step along with the rater facet:\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nfacets <- data[, \"rater\", drop=FALSE]  # define facet (rater)\npid <- data$essayId  # define person identifier\nresp <- data[, -c(5:6)]  # item response data\nformulaA <- ~item*step + rater   # formula for PCM\n\n\nmod <- TAM::tam.mml.mfr(resp=resp, facets=facets, formulaA=formulaA, pid=data$essayId)\n```\n:::\n\n\n## 3. Model diagnostics\n\nNow that we've fitted our Multi-Facet Rasch Model (MFRM) with PCM, let's take a closer look at the results and explore some diagnostics.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nfit_stats <- TAM::tam.fit(mod)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nItem fit calculation based on 15 simulations\n|**********|\n|----------|\n```\n\n\n:::\n\n```{.r .cell-code  code-fold=\"false\"}\nprint(fit_stats)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$itemfit\n     parameter    Outfit   Outfit_t      Outfit_p  Outfit_pholm     Infit\n1          Con 2.0585470  39.400899  0.000000e+00  0.000000e+00 2.1997279\n2        ProAd 1.5369865  22.163909 7.660384e-109 6.894345e-108 1.6258684\n3         Lang 2.2662066  47.841294  0.000000e+00  0.000000e+00 2.3468649\n4          Nar 1.8419808  33.231069 3.832185e-242 4.215404e-241 1.9461538\n5        step1 0.9567419  -3.116628  1.829322e-03  3.658643e-03 0.9437283\n6        step2 0.4912645 -53.179892  0.000000e+00  0.000000e+00 0.4085188\n7        step3 0.2717863 -95.710904  0.000000e+00  0.000000e+00 0.1844266\n8        step4 0.9264361  -5.793804  6.880989e-09  2.752395e-08 0.6006956\n9       rater1 0.2621579 -84.439666  0.000000e+00  0.000000e+00 0.2011799\n10      rater2 0.2102910 -97.073351  0.000000e+00  0.000000e+00 0.1288749\n11      rater3 0.3424868 -71.428762  0.000000e+00  0.000000e+00 0.1956220\n12   Con:step1 0.8383549  -8.767845  1.821186e-18  9.105928e-18 0.8567601\n13 ProAd:step1 0.6746071 -17.860710  2.385854e-71  1.908684e-70 0.7093789\n14  Lang:step1 0.5168563 -29.428336 2.384008e-190 2.384008e-189 0.5191105\n15   Nar:step1 0.6848650 -16.325045  6.549193e-60  4.584435e-59 0.7059203\n16   Con:step2 0.5306292 -34.037821 6.146371e-254 7.375646e-253 0.4422111\n17 ProAd:step2 0.4301068 -42.502850  0.000000e+00  0.000000e+00 0.3495629\n18  Lang:step2 0.1968146 -75.897830  0.000000e+00  0.000000e+00 0.1635975\n19   Nar:step2 0.3706675 -46.198429  0.000000e+00  0.000000e+00 0.3078140\n20   Con:step3 0.2786884 -67.291049  0.000000e+00  0.000000e+00 0.2258991\n21 ProAd:step3 0.2765834 -63.618697  0.000000e+00  0.000000e+00 0.2089943\n22  Lang:step3 0.1940462 -83.250195  0.000000e+00  0.000000e+00 0.1146795\n23   Nar:step3 0.2486903 -65.156140  0.000000e+00  0.000000e+00 0.1831799\n24   Con:step4 0.9454987  -3.062781  2.192904e-03  3.658643e-03 0.5753692\n25 ProAd:step4 0.8972583  -5.504223  3.708007e-08  1.112402e-07 0.5197597\n26  Lang:step4 0.4646499 -36.807248 1.413705e-296 1.837816e-295 0.2790765\n27   Nar:step4 0.7695600 -12.352597  4.716384e-35  2.829830e-34 0.4601422\n       Infit_t       Infit_p   Infit_pholm\n1    43.518674  0.000000e+00  0.000000e+00\n2    25.305265 2.795231e-141 1.397615e-140\n3    50.193787  0.000000e+00  0.000000e+00\n4    36.569488 8.740425e-293 9.614468e-292\n5    -4.072490  4.651324e-05  4.651324e-05\n6   -65.039270  0.000000e+00  0.000000e+00\n7  -117.030438  0.000000e+00  0.000000e+00\n8   -35.943187 6.467215e-283 6.467215e-282\n9   -97.120190  0.000000e+00  0.000000e+00\n10 -118.521551  0.000000e+00  0.000000e+00\n11  -99.762812  0.000000e+00  0.000000e+00\n12   -7.714673  1.212932e-14  2.425863e-14\n13  -15.707699  1.339532e-55  5.358129e-55\n14  -29.253821 4.014915e-188 2.810441e-187\n15  -15.092688  1.809200e-51  5.427601e-51\n16  -42.570434  0.000000e+00  0.000000e+00\n17  -51.243782  0.000000e+00  0.000000e+00\n18  -82.205358  0.000000e+00  0.000000e+00\n19  -53.275846  0.000000e+00  0.000000e+00\n20  -75.825584  0.000000e+00  0.000000e+00\n21  -74.171526  0.000000e+00  0.000000e+00\n22 -101.621224  0.000000e+00  0.000000e+00\n23  -75.808557  0.000000e+00  0.000000e+00\n24  -27.893121 3.233260e-171 1.939956e-170\n25  -30.422787 2.744866e-203 2.195893e-202\n26  -56.571162  0.000000e+00  0.000000e+00\n27  -33.694854 6.876231e-249 6.188608e-248\n\n$time\n[1] \"2024-11-20 23:37:39 +03\" \"2024-11-20 23:37:39 +03\"\n\n$CALL\nTAM::tam.fit(tamobj = mod)\n\nattr(,\"class\")\n[1] \"tam.fit\"\n```\n\n\n:::\n:::\n\n\n-   **Infit and Outfit Values:**\n\n    -   **Infit and Outfit near 1:** Indicates that the item fits well with the model.\n\n    -   **Infit/Outfit significantly \\>1:** Indicates that the item is *underfitting*, meaning there is more variability in the responses than the model expects (perhaps caused by noise or misfitting responses).\n\n    -   **Infit/Outfit significantly \\<1:** Indicates that the item is *overfitting*, meaning the responses are too predictable, and there's less variability than expected by the model (possibly due to redundancy or lack of challenge).\n\n    Let's break down a few examples from the output:\n\n    -   **Content (Con):**\n\n        -   Outfit MNSQ: 2.05, Infit MNSQ: 2.18\n\n        -   These values are well above 1, indicating underfit. The item \"Con\" might be too noisy or not behaving consistently with the model.\n\n    -   **Prompt Adherence (ProAd):**\n\n        -   Outfit MNSQ: 1.54, Infit MNSQ: 1.63\n\n        -   These values are higher than 1 but still in the acceptable range, meaning there's some noise, but it’s not excessive.\n\n    -   **Language (Lang):**\n\n        -   Outfit MNSQ: 2.26, Infit MNSQ: 2.34\n\n        -   These values suggest significant underfit, similar to \"Con\", indicating that responses to this domain might be less consistent or more unpredictable than the model expects.\n\n    -   **Steps (step1 to step4):**\n\n        -   Some steps, such as **step1**, have Infit and Outfit values closer to 1 (e.g., Outfit MNSQ: 0.95, Infit MNSQ: 0.94). These are acceptable and suggest that step1 is fitting well.\n\n        -   However, **step2, step3, and step4** show extremely low values, especially for Outfit (e.g., **step3** has an Outfit MNSQ of **0.26**), indicating overfit, meaning these categories are too predictable and might not differentiate well between respondents.\n\n-   **t-statistics and p-values:**\n\n    -   The **t-statistics (Outfit_t, Infit_t)** are standardized fit statistics that test whether the Infit/Outfit values significantly differ from 1. Large positive or negative t-values indicate significant deviation from expected values.\n\n    -   The **p-values (Outfit_p, Infit_p)** show whether these deviations are statistically significant. Nearly all p-values are extremely low (close to 0), suggesting that most of the items are statistically misfitting according to the model.\n\n-   **Rater Severity:**\n\n    -   **Rater1, Rater2, Rater3** all have very low Infit and Outfit values (e.g., **Rater1 Outfit: 0.26**), which suggest that these raters may be overfitting. This could mean that they are scoring in a highly predictable way, possibly being too strict or lenient consistently.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nreliability <- mod$EAP.rel\nreliability\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.9716057\n```\n\n\n:::\n:::\n\n\nThe final **WLE Reliability = 0.97** is an excellent reliability score, meaning that the person ability estimates are very consistent. WLE reliability, similar to other reliability coefficients like Cronbach’s alpha, indicates the precision of the estimates:\n\nA **0.97 reliability** means that 97% of the variance in the person ability estimates is due to true differences in ability rather than measurement error.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\npersons.mod <- TAM::tam.wle(mod)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nIteration in WLE/MLE estimation  1   | Maximal change  2.8113 \nIteration in WLE/MLE estimation  2   | Maximal change  2.8413 \nIteration in WLE/MLE estimation  3   | Maximal change  2.5741 \nIteration in WLE/MLE estimation  4   | Maximal change  2.1203 \nIteration in WLE/MLE estimation  5   | Maximal change  2.3278 \nIteration in WLE/MLE estimation  6   | Maximal change  0.4228 \nIteration in WLE/MLE estimation  7   | Maximal change  0.0637 \nIteration in WLE/MLE estimation  8   | Maximal change  0.0071 \nIteration in WLE/MLE estimation  9   | Maximal change  8e-04 \nIteration in WLE/MLE estimation  10   | Maximal change  1e-04 \n----\n WLE Reliability= 0.97 \n```\n\n\n:::\n\n```{.r .cell-code  code-fold=\"false\"}\nggplot(data.frame(theta = persons.mod$theta), aes(x = theta)) +\n  geom_histogram(binwidth = 0.2, fill = \"steelblue\", color = \"black\") +\n  labs(title = \"Distribution of Person Ability Estimates\", x = \"Ability (Theta)\", y = \"Frequency\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\nAlso see the theta distributions in the chart. They do not look nice as this is a study run on simulated data.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nthr <- TAM::tam.threshold(mod)\nthr\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                    Cat1       Cat2       Cat3     Cat4\nCon-rater1    -8.3634338 -4.8121033 -1.2173767 2.406464\nCon-rater2    -4.3898621 -0.8385315  2.7560120 6.380035\nCon-rater3    -0.5052795  3.0462341  6.6957092       NA\nProAd-rater1  -8.5340881 -4.4764709 -0.6612854 3.438995\nProAd-rater2  -4.5606995 -0.5028992  3.3122864 7.412567\nProAd-rater3  -0.6759338  3.3818665  7.2305603       NA\nLang-rater1  -10.0357361 -5.8611145 -1.8104553 2.433380\nLang-rater2   -6.0621643 -1.8877258  2.1631165 6.406952\nLang-rater3   -2.1775818  1.9970398  6.0768127       NA\nNar-rater1    -9.4873352 -5.3533630 -1.3221130 2.769928\nNar-rater2    -5.5137634 -1.3799744  2.6514587 6.743317\nNar-rater3    -1.6289978  2.5047913  6.5700989       NA\n```\n\n\n:::\n:::\n\n\n**Ordered thresholds** are crucial to ensure that the categories are functioning properly. For example, for **Con-rater1**, the thresholds are: -8.36, -4.81, -1.21, and 2.41\n\nThese thresholds are in increasing order, which indicates that the rating scale is working as intended for **Con-rater1**—the higher categories represent more difficult levels to achieve.\n\n**Raters 1, 2, and 3 Comparison:**\n\n-   **Rater Differences:** There are noticeable differences between raters in their thresholds. For example:\n\n    -   **Con-rater1** has very negative thresholds, starting at -8.36 for Cat1, while **Con-rater3** starts much higher, with thresholds beginning at -0.50.\n\n    -   This suggests that **Rater1** is much stricter or uses a harsher scale, while **Rater3** is more lenient, with easier transitions between categories. For instance, it is harder for essays to move from a \"1\" to a \"2\" under Rater1’s scoring compared to Rater3.\n\n    -   There are some NAs which actually I have no idea about. Peobably these inconsistancies occur due to the simulated data.\n\n## 4. Visualizing the Results\n\nTo make the interpretation more intuitive, we can visualize the item difficulty and rater severity using a **dot plot** for the difficulty estimates, which can help us compare how each domain and rater behaves. Here’s how we can generate these plots in R.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nfacet_params<-mod[[\"xsi.facets\"]][[\"parameter\"]]\ndomain_params<-facet_params[1:4]\n\nf1 <- ggplot(data = persons.mod, aes(x = theta))+\n  geom_dotplot(binwidth = .1, stackdir = \"down\") + \n  theme_bw()  +\n  scale_y_continuous(name = \"\", breaks = NULL) +\n  scale_x_continuous(breaks=seq(-6, 6, .6), limits=c(-6, 6), \n                     position =  \"top\") + \n  theme(axis.title.y = element_blank(), \n        axis.title.x=element_blank(),\n        axis.text.x=element_blank(),\n        axis.ticks.x=element_blank())+\n  labs(title = \"Persons\") + \n  coord_flip()\n\nf2 <- mod$xsi.facets %>%\n  filter(str_starts(parameter, \"rater\")) %>%\n  ggplot(aes(x = xsi)) +\n  geom_text(aes(y = 0, label = parameter), nudge_y = 0.05, size = 3) +\n  theme_bw() +\n  scale_y_continuous(name = \"\", breaks = NULL) +\n  scale_x_continuous(breaks = seq(-6, 6, .5), limits = c(-6, 6), position = \"top\") + \n  theme(axis.title.y = element_blank(),\n        axis.text.y = element_blank(),\n        axis.ticks.y = element_blank(),\n        axis.title.x = element_blank()) +\n  labs(title = \"Raters\") + \n  coord_flip()\n\nf3 <- mod$xsi.facets %>%\n  filter(parameter %in% domain_params) %>%\n  ggplot(aes(x = xsi)) +\n  geom_text(aes(y = 0, label = parameter), nudge_y = 0.05, size = 3) + \n    theme_bw()  +\n    scale_y_continuous(name = \"\", breaks = NULL) +\n    scale_x_continuous(breaks=seq(-2, 2, .2), limits=c(-2, 2), \n                       position =  \"top\") + \n    theme(axis.title.y=element_blank(),\n          axis.text.y=element_blank(),\n          axis.ticks.y=element_blank(),\n          axis.title.x= element_blank())+\n    labs(title = \"Domain\") + \n    coord_flip()\n\nplot_grid(f1, f2, f3, nrow = 1, rel_widths = c(0.7, .15, .15))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/Wright Map-1.png){width=672}\n:::\n:::\n\n\nThis final chart is developed as an alternative to `wrightmap`. Each facet can be seen easily on it. There are four grids. The first is the person thetas. We have seen this above. The second is the rater facet. The strictness of the raters are very distinctive. Actually the only real data here is rater 2 and the others were simulated using it to be stricter and lenient. So we exactly see what the data is about. The third grid is about the domains/item difficulty. Pompt Adherence is the most difficult domain. Content, Narrative and Language follows it respectively.\n\n## 4. Conclusion\n\nIn this post, we explored the **Multi-Facet Rasch Model (MFRM)** using simulated essay scores rated by multiple raters across four different domains: Content, Prompt Adherence, Language, and Narrativity. The model helped us account for the varying levels of item difficulty and the potential differences in rater severity. By fitting the MFRM and examining key model outputs—like **Infit/Outfit statistics** and **thresholds**—we identified areas where raters were either more lenient or more severe, and items that displayed more noise or predictability than expected.\n\nThe high **WLE reliability** of 0.97 indicates that the model provides consistent and accurate estimates of person abilities. However, the rater-specific thresholds revealed some important differences in how each rater scored the essays, with certain raters being significantly stricter or more lenient. This highlights the importance of accounting for rater bias in assessments that rely on subjective judgments, such as essay scoring.\n\nGoing forward, addressing these rater differences and ensuring well-functioning rating categories can further refine the assessment process. By doing so, we can ensure that the scores are fairer and more representative of true essay quality, free from the influence of individual rater biases. Overall, the MFRM proves to be a valuable tool in maintaining the validity and reliability of assessments involving subjective judgments.\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}