{
  "hash": "1bd44a91e5cf95bd8efa1935b2c21261",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"How to Build a Custom Chat Bot with R\"\ndescription: |\n  Large language Models (LLMs) are an important part of our daily lives now. We use them for web search, daily tasks, automation etc. Today, we will explore the details of working with LLMs and how to build a custom chat bot with R.\ncrossref:\n  fig-labels: alpha a    \n  tbl-labels: alpha a    \n  subref-labels: roman i \n  chapters: true\nauthor:\n  - name: Ali Emre Karag√ºl\n    orcid: 0000-0002-5820-8643\n    email: aliemrekaragul@gmail.com\n    affiliations:\n      - name: University of Economics & Technology\n        city: Ankara\n        url: https://www.etu.edu.tr/tr\n      - name: Gazi University\n        city: Ankara\n        url: https://gazi.edu.tr/\ndate: 2024-11-27\ncategories: [httr, jsonlite, shiny, bslib]\nimage: \"image.png\"\noutput:\n    self_contained: false\n    code_folding: false\n---\n\n\n\n## Introduction\n\nUsing LLMs in our daily tasks is a common practice now. Most of the time we use them with user interfaces provided by the companies such as OpenAi. However, they are also highly utilized by developers in chat bots or automation processes. There are dozens of commercial or non-commercial LLMs in the market. You can use any of them to build your own chat bot. In this tutorial, we will use llama to build a custom chat bot with R.\n\n::: {.callout-note title=\"about R package Elmer\"}\nI have read that Hadly Wickham and Posit have been working on an R package into `Tidyverse` to make LLM API calls from R. It is still experimental; thus can be installed via [github repository](https://github.com/tidyverse/elmer). We are not going to be using it in this tutorial.\n:::\n\nThere are two ways to use llama: 1. Run llama on your local machine if your machine has sufficient hardware. 2. Use an API to send requests to servers of third-party providers such as Groq.\n\nThe first option is pretty easy and there are many interfaces to use llama on your local machine. However, it requires a GPU depending on the model you would like to utilize and is used by only your local environment unless you make your own server out of your computer. The second option, on the other hand, is more scalable and you can deploy it to web. You won't need to worry about the hardware (GPUs etc) or the maintenance of the server.\n\nIn this tutorial, we will use the second option to build our chat bot, but if you want to use the first option, you can download llama to your local environment from [here](https://ollama.com/download). Also, see a tutorial about how to build a local LMM [here](https://www.datacamp.com/tutorial/run-llama-3-locally).\n\n## Getting Started\n\nYet, today, we will use Groq's servers to build our chat bot. [Groq](https://groq.com/about-us/) is an amazing web tool that provides free APIs to developers with hourly and daily limits. But, no need to worry as the limits are quite high and it is almost impossible to reach them unless you are using it in your production environment rather than development purposes. You can sign up for free and get your API key from [here](https://console.groq.com/login).\n\n::: column-margin\n![Groq Playground Interface](images/groq_playground.png){.lightbox} Click to expand.\n:::\n\n1.  Go to the link and sign up with your prefered method.\n2.  You will be directed to the Groq's playground where you can try different LLMs with custom system messages or parameters. Click on the image to expand it.\n3.  Click on **API Keys** on the left side of the screen.\n4.  Then, click on the **Create API Key** button on the page.\n5.  Give a name to your API key and click on the **Submit** button.\n6.  You will see your API key on the screen. Copy it and save it in a safe place. You won't be able to see it again, so if you lose your API key, you will need to create a new one. Never share it with anybody.\n\nThat's it, you have your API key now. Let's see some ways to use a free LLM in your R environment.\n\n## Using Groq API with R\n\nAssign your API key and `model` name to variables in your R environment. Model can be any one of the models provided by Groq such as `gemma2-9b-it` or `whisper-large-v3-turbo`. You can see the list of models [here](https://console.groq.com/docs/models). We will use `llama-3.1-70b-versatile` in this tutorial.\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\napi_key <- \"COPY_YOUR_API_KEY_HERE\"\nmodel <- \"llama-3.1-70b-versatile\"\n```\n:::\n\n::: {.cell}\n\n:::\n\n\n\nWe can use `httr` package to send HTTP requests to the server and get the response. We can also use `jsonlite` package to parse the response.\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nlibrary(httr)\nlibrary(jsonlite)\nchatbot <- function(api_key, model, conversation_history) {\n\n  url <- \"https://api.groq.com/openai/v1/chat/completions\"\n  \n\n  response <- POST(\n    url,\n    add_headers(\n      `Content-Type` = \"application/json\",\n      `Authorization` = paste(\"Bearer\", api_key)\n    ),\n    body = toJSON(list(\n      model = model,\n      messages = conversation_history\n    ), auto_unbox = TRUE),\n    encode = \"json\"\n  )\n  \n  if (http_status(response)$category != \"Success\") {\n    stop(\"API request failed: \", content(response, \"text\"))\n  }\n  \n  result <- content(response, as = \"parsed\", simplifyVector = TRUE)\n  \n  return(result[[\"choices\"]][[\"message\"]][[\"content\"]])\n}\n```\n:::\n\n\n\nThe given code is a function called `chatbot` that sends a POST request to the Groq's server with the given `api_key`, `model` and `conversation_history`. The `conversation_history` is a list of messages that the chat bot has either received or replied so far. The function returns the response of the LLM as a string. We will be using this function to make requests to the API.\n\nLet's make a try:\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nconversation_history <- list()\nuser_message <- \"Hello, tell me a joke about statistics!\"\nconversation_history <- append(conversation_history, list(list(role = \"user\", content = user_message)))\n\n# Get the response from the chat bot\nbot_response <- chatbot(api_key, model, conversation_history)\ncat(bot_response)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nWhy did the statistician get lost in the forest? \n\nBecause he was 95% sure he was on the right path.\n```\n\n\n:::\n:::\n\n\n\n## Running the Bot on the Console\n\nNow that we are sure we can get response to our messages, let's build a simple chat bot that can be run on the console. We will use `readline` function to get the user input.\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nprint(\"Chatbot initialized. Type 'exit' to quit.\")\nwhile (TRUE) {\n  user_message <- readline(prompt = \"You: \")\n  if (tolower(user_message) == \"exit\") {\n    print(\"Goodbye!\")\n    break\n  }\n  conversation_history <- append(conversation_history, list(list(role = \"user\", content = user_message)))\n  bot_response <- chatbot(api_key, model, conversation_history)\n  conversation_history <- append(conversation_history, list(list(role = \"assistant\", content = bot_response)))\n  cat(\"Chat bot:\", bot_response, sep = \"\\n\")\n}\n```\n:::\n\n\n\nWhen you run this code, you will be prompted to type your message in the console. You will start a conversation with the chat bot, and you can ask follow-up questions as we inform the API about the conversation history while making the requests. Click on the image to expand.\n\n![Chat Example-1](images/chat-1.png){.lightbox width=\"100%\" fig-alt=\"Chat Example\"}\n\nThe bot will expect you to type a message until you type `exit` to quit the conversation or close the console. Even if you type `exit`, your conversation history will be stored in your local R environment. Unless you delete it or reassign an empty list again, the chat bot will remember the previous messages and will reply you accordingly when you start it again. To reassign an empty list, or in other words to clear the chat history, you just need to run the following:\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nconversation_history <- list()\n```\n:::\n\n\n\n### Creating a Custom Bot with a System Message\n\nWe can also give a system message to the API to inform the chat bot about the context of the conversation. This will assign a persona to the bot and it will reply accordingly. For example; \"**You are a comedian bot who makes jokes about statistics. No matter what the user says, just make a joke about statistics.**\" would be a good system message for our bot called `fun_stats_bot`. All we need is to `append` the system message in to the conversation history when it is called for the first time.\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nfun_stats_bot <- function(api_key, model, conversation_history) {\n  if (length(conversation_history) == 1) {\n    system_message <- \"You are a comedian bot who makes jokes about statistics. No matter what the user says, just make a joke about statistics.\"\n    conversation_history <- append(conversation_history, list(list(role = \"system\", content = system_message)))\n  }\n  url <- \"https://api.groq.com/openai/v1/chat/completions\"\n  \n\n  response <- POST(\n    url,\n    add_headers(\n      `Content-Type` = \"application/json\",\n      `Authorization` = paste(\"Bearer\", api_key)\n    ),\n    body = toJSON(list(\n      model = model,\n      messages = conversation_history\n    ), auto_unbox = TRUE),\n    encode = \"json\"\n  )\n  \n  if (http_status(response)$category != \"Success\") {\n    stop(\"API request failed: \", content(response, \"text\"))\n  }\n  \n  result <- content(response, as = \"parsed\", simplifyVector = TRUE)\n  \n  return(result[[\"choices\"]][[\"message\"]][[\"content\"]])\n}\n```\n:::\n\n\n\nNow, we can run the chat bot with the `fun_stats_bot` function this time. See a sample chat's image.\n\n::: column-margin\n![Chat Example-2](images/chat-2.png){.lightbox width=\"100%\" fig-alt=\"Chat Example\"} Click to expand.\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nprint(\"Chatbot initialized. Type 'exit' to quit.\")\nwhile (TRUE) {\n  user_message <- readline(prompt = \"You: \")\n  if (tolower(user_message) == \"exit\") {\n    print(\"Goodbye!\")\n    break\n  }\n  conversation_history <- append(conversation_history, list(list(role = \"user\", content = user_message)))\n  bot_response <- fun_stats_bot(api_key, model, conversation_history)\n  conversation_history <- append(conversation_history, list(list(role = \"assistant\", content = bot_response)))\n  cat(\"Chat bot:\", bot_response, sep = \"\\n\")\n}\n```\n:::\n\n\n\n## Building a Shiny App of a Chat Bot\n\nThat's it. We have built our own chat bot with R. We can build a web application with it and even deploy it to the web. Here is a sample shiny app: [Funny Statistics Bot](https://aliemrekaragul.shinyapps.io/fun_stat_bot/). The source code for it is also given below (expand the code block to see). This code will create a shiny app that you can run on your local machine or on web. You can find a lot of tutorials on web such as [how to deploy a shiny app to the web](https://shiny.posit.co/r/deploy.html).\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nlibrary(shiny)\nlibrary(httr)\nlibrary(jsonlite)\nlibrary(bslib)\n### UTILITIES & VARIABLES ###\ngroq_k <- \"COPY_YOUR_API_KEY_HERE\"\nmodel <- \"llama-3.1-70b-versatile\"\n\nchatbot <- function(groq_k, model, conversation_history) {\n  url <- \"https://api.groq.com/openai/v1/chat/completions\"\n  if (length(conversation_history) == 1) {\n    system_message <- \"You are a comedian bot who makes jokes about statistics. No matter what the user says, just make a joke about statistics.\"\n    conversation_history <- append(conversation_history, list(list(role = \"system\", content = system_message)))\n  }\n  response <- POST(\n    url,\n    add_headers(\n      `Content-Type` = \"application/json\",\n      `Authorization` = paste(\"Bearer\", groq_k)\n    ),\n    body = toJSON(list(\n      model = model,\n      messages = conversation_history\n    ), auto_unbox = TRUE),\n    encode = \"json\"\n  )\n  \n  if (http_status(response)$category != \"Success\") {\n    stop(\"API request failed: \", content(response, \"text\"))\n  }\n  \n  result <- content(response, as = \"parsed\", simplifyVector = TRUE)\n  return(result[[\"choices\"]][[\"message\"]][[\"content\"]])\n}\n\npress_enter_to_send <- '\n$(function() {\n  var $els = $(\"[data-proxy-click]\");\n  $.each(\n    $els,\n    function(idx, el) {\n      var $el = $(el);\n      var $proxy = $(\"#\" + $el.data(\"proxyClick\"));\n      $el.keydown(function (e) {\n        if (e.keyCode == 13) {\n          $proxy.click();\n        }\n      });\n    }\n  );\n});\n'\n\n### FRONTEND ###\nui <- page_sidebar(\n  tags$head(tags$script(HTML(press_enter_to_send))),\n  title = \"Funny Statistics Bot\",\n  sidebar = sidebar(\n    \"Your old conversations would be here, but this app does not store your data.\"\n  ),\n  card(\n    card_header(\"Conversation\", class = \"bg-dark\"),\n    \n    card_body(class = \"bg-light\",\n      uiOutput(\"conversation_display\")\n    ),\n    \n    card_footer(\n      tagAppendAttributes(\n        textInput(\"user_message\", \"Your Message:\", \"\", width = \"100%\"),\n        `data-proxy-click` = \"send\"\n      ),\n      actionButton(\"send\", \"Send\", icon = icon(\"paper-plane\"), class = \"btn-primary\"),\n      actionButton(\"clear\", \"Clear\", icon = icon(\"trash-alt\"), class = \"btn-danger\"),\n    )\n  )\n)\n\n### BACKEND ###\nserver <- function(input, output, session) {\n\n  conversation_history <- reactiveVal(list())\n  \n  observeEvent(input$send, {\n    req(input$user_message) \n    \n    current_history <- conversation_history()\n    current_history <- append(current_history, list(list(role = \"user\", content = input$user_message)))\n\n    bot_response <- tryCatch({\n      chatbot(groq_k, model, current_history)\n    }, error = function(e) {\n      \"Error: Unable to fetch response. Please try again.\"\n    })\n    \n    current_history <- append(current_history, list(list(role = \"assistant\", content = bot_response)))\n    conversation_history(current_history)\n    \n    updateTextInput(session, \"user_message\", value = \"\")\n  })\n  \n  observeEvent(input$clear, {\n    conversation_history(list())\n  })\n  \n  output$conversation_display <- renderUI({\n    history <- conversation_history()\n    if (length(history) == 0) {\n      return(p(\"Start chatting!\"))\n    }\n    \n    tags$div(\n      lapply(seq_along(history), function(i) {\n        message <- history[[i]]\n        if (message$role == \"user\") {\n          tags$p(tags$b(\"You: \"), message$content)\n        } else {\n          tags$p(tags$b(\"Chatbot: \"), message$content)\n        }\n      })\n    )\n  })\n}\n\n# Run the app\nshinyApp(ui = ui, server = server)\n```\n:::\n\n\n\n## Conclusion\n\nIn this tutorial, we have learned how to build a custom chat bot with R using Groq's API. We have also built a shiny app. There are many use cases for LLMs in production. You can build RAG (retrieval augmented generation), CoT (chain of thought), or HyDE (Hypothetical Document Embeddings) models with R to make your chat bot more intelligent and customized. You can also use the same API to build a question-answering system or a summarization tool. You can build a to-do list generator that can give you items with only a goal phrase. You can create a bot to convert natural language to SQL queries (Text-2-SQL). The possibilities are endless. I hope you enjoyed this tutorial and learned something new. If you have any questions or comments, please feel free to reach out to me. Thank you for reading.\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}