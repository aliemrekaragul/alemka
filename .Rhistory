DDplot(my_data, discrim = 'RIR', k = 3, l = 1, u = 3, thr=0.1)
#| warning: false
#| eval: true
#| echo: true
#| code-fold: false
DDplot(my_data, discrim = 'RIT', k = 3, l = 1, u = 3, thr=0.1)
#| warning: false
#| eval: true
#| echo: true
#| code-fold: false
DDplot(my_data, discrim = 'ULI', k = 3, l = 1, u = 3, thr=0.1)
#| warning: false
#| eval: true
#| echo: true
#| code-fold: false
ShinyItemAnalysis::ItemAnalysis(my_data)
#| warning: false
#| eval: true
#| echo: false
#| code-fold: false
library(multilevel)
library(ShinyItemAnalysis)
#| warning: false
#| eval: true
#| echo: true
#| code-fold: false
my_data<-read.csv("data for post about item difficulty and discrimination.csv",sep=";", header = TRUE)
head(my_data)
#| warning: false
#| eval: true
#| echo: true
#| code-fold: false
# Calculate item difficulty
item_difficulty <- colMeans(my_data)
item_difficulty
#| warning: false
#| eval: true
#| echo: true
#| code-fold: false
#get the total score for each participant
total_score <- rowSums(my_data)
#There are 40 items in the test:
# item_discrimination <- 40
#calculate rpb for each item:
for(i in 1:40){
item_discrimination[i] <- cor(total_score, my_data[,i])
}
round(item_discrimination,4)
#| warning: false
#| eval: true
#| echo: true
#| code-fold: false
#get the total score for each participant
total_score <- rowSums(my_data)
#There are 40 items in the test:
# item_discrimination <- 40
#calculate rpb for each item:
for(i in 1:40){
item_discrimination[i] <- cor(total_score, my_data[,i])
}
round(item_discrimination,4)
#| warning: false
#| eval: true
#| echo: true
#| code-fold: false
#get the total score for each participant
total_score <- rowSums(my_data)
#There are 40 items in the test:
# item_discrimination <- 40
#calculate rpb for each item:
for(i in 1:40){
item_discrimination[i] <- cor(total_score, my_data[,i])
}
round(item_discrimination,4)
#| warning: false
#| eval: true
#| echo: true
#| code-fold: false
#get the total score for each participant
total_score <- rowSums(my_data)
#There are 40 items in the test:
# item_discrimination <- 40
#calculate rpb for each item:
for(i in 1:40){
item_discriminations[i] <- cor(total_score, my_data[,i])
}
#| warning: false
#| eval: true
#| echo: true
#| code-fold: false
#get the total score for each participant
total_score <- rowSums(my_data)
#There are 40 items in the test:
item_discrimination <- 40
#calculate rpb for each item:
for(i in 1:40){
item_discrimination[i] <- cor(total_score, my_data[,i])
}
round(item_discrimination,4)
#| warning: false
#| eval: true
#| echo: false
#| code-fold: false
library(multilevel)
library(ShinyItemAnalysis)
#| warning: false
#| eval: true
#| echo: true
#| code-fold: false
my_data<-read.csv("data for post about item difficulty and discrimination.csv",sep=";", header = TRUE)
head(my_data)
#| warning: false
#| eval: true
#| echo: true
#| code-fold: false
# Calculate item difficulty
item_difficulty <- colMeans(my_data)
item_difficulty
#| warning: false
#| eval: true
#| echo: true
#| code-fold: false
#get the total score for each participant
total_score <- rowSums(my_data)
#There are 40 items in the test:
item_discrimination1 <- 40
#calculate rpb for each item:
for(i in 1:40){
item_discrimination1[i] <- cor(total_score, my_data[,i])
}
round(item_discrimination1,4)
#| warning: false
#| eval: true
#| echo: true
#| code-fold: false
item_discrimination2<-multilevel::item.total(my_data)
item_discrimination2$Item.Total
#| warning: false
#| eval: true
#| echo: true
#| code-fold: false
item_discrimination3<-ShinyItemAnalysis::gDiscrim(my_data)
item_discrimination3
#| warning: false
#| eval: true
#| echo: true
#| code-fold: false
my_data<-read.csv("data for post about item difficulty and discrimination.csv",sep=";", header = TRUE)
#head(my_data)
DT::datatable(knitr::kable(my_data))
#head(my_data)
str(my_data)
#| warning: false
#| eval: true
#| echo: true
#| code-fold: false
item_stats<-ShinyItemAnalysis::ItemAnalysis(my_data)
head(item_stats)
knitr::kable(item_Stats)
#| warning: false
#| eval: true
#| echo: true
#| code-fold: false
library(multilevel)
library(ShinyItemAnalysis)
#| warning: false
#| eval: true
#| echo: true
#| code-fold: false
my_data<-read.csv("data for post about item difficulty and discrimination.csv",sep=";", header = TRUE)
head(my_data)
#| warning: false
#| eval: true
#| echo: true
#| code-fold: false
# Calculate item difficulty
item_difficulty <- colMeans(my_data)
item_difficulty
#| warning: false
#| eval: true
#| echo: true
#| code-fold: false
#get the total score for each participant
total_score <- rowSums(my_data)
#There are 40 items in the test:
item_discrimination1 <- 40
#calculate rpb for each item:
for(i in 1:40){
item_discrimination1[i] <- cor(total_score, my_data[,i])
}
round(item_discrimination1,4)
#| warning: false
#| eval: true
#| echo: true
#| code-fold: false
item_discrimination2<-multilevel::item.total(my_data)
item_discrimination2$Item.Total
#| warning: false
#| eval: true
#| echo: true
#| code-fold: false
item_discrimination3<-ShinyItemAnalysis::gDiscrim(my_data)
item_discrimination3
#| warning: false
#| eval: true
#| echo: true
#| code-fold: false
item_stats<-ShinyItemAnalysis::ItemAnalysis(my_data)
head(item_stats)
knitr::kable(item_Stats)
item_stats<-ShinyItemAnalysis::ItemAnalysis(my_data)
head(item_stats)
knitr::kable(item_stats)
#| warning: false
#| eval: true
#| echo: true
#| code-fold: false
item_stats<-round(ShinyItemAnalysis::ItemAnalysis(my_data),2)
head(item_stats)
knitr::kable(item_stats)
knitr::opts_chunk$set(echo = FALSE)
#| warning: false
#| eval: true
#| echo: true
#| code-fold: false
library(rvest)
library(dplyr)
library(tm)
library(stopwords)
library(wordcloud)
library(wordcloud2)
#| warning: false
#| eval: true
#| echo: true
#| code-fold: false
html <- read_html("https://eksisozluk.com/veri-bilimi--3426406")
#| warning: false
#| eval: true
#| echo: true
#| code-fold: false
html <- read_html("https://eksisozluk.com/veri-bilimi--3426406")
read_html("https://eksisozluk.com/veri-bilimi--3426406")
#| warning: false
#| eval: true
#| echo: true
#| code-fold: false
#round is for rounding the values in the results.
item_stats<-round(ShinyItemAnalysis::ItemAnalysis(my_data),2)
#to see all the output in a table:
knitr::kable(item_stats)
install.packages("tm")
install.packages("stopwords")
install.packages("wordcloud")
install.packages("wordcloud2")
library(equate)
install.packages("equate")
xACT <- as.freqtab(ACTmath[,c(1,2)])
library(equate)
xACT <- as.freqtab(ACTmath[,c(1,2)])
yACT <- as.freqtab(ACTmath[,c(1,3)])
eq.equipercentile <- equate(xACT, yACT,
method = "none",
type = "equipercentile")
eq.mean <- equate(xACT, yACT, type = "m")
eq.linear <- equate(xACT, yACT, type = "l")
plot(eq.mean,eq.linear,eq.equipercentile,lty=c(1,2,3,4),
+ col=c(3,4,5,6))
plot(eq.mean,eq.linear,eq.equipercentile,lty=c(1,2,3,4),
col=c(3,4,5,6))
eq.equipercentile$con
eq.equipercentile$conc$yx
str(eq.equipercentile)
eq.equipercentile
eq.mean
eq.linear
#These datasets are from Kolen&Brennan (2014). They are collected under the EG design.
# we first convert the data into score frequency distributions.
ACTmath
xACT
eq.mean
eq.linear
eq.equipercentile
str(eq.mean)
eq.mean$con
eq.mean$conc$yx
eq.mean$con
eq.linear$con
eq.equipercentile$con
eq.equipercentile
?as.freqtab
#formları oluşturalım:
xACT <- as.freqtab(ACTmath[,c(1,2)], design = "eg")
yACT <- as.freqtab(ACTmath[,c(1,3)], design = "eg")
#formları oluşturalım:
xACT <- as.freqtab(ACTmath[,c(1,2)], design = "sg")
#eşitleme fonksiyonunu kuralım:
eq.mean <- equate(xACT, yACT, type = "mean")
eq.linear <- equate(xACT, yACT, type = "linear")
# her yöntemin özet istatistikleri:
eq.mean
#her yönteme ait eşitlenmiş puanlar:
eq.mean$con
eq.linear
eq.linear$con
openxlsx::write.xlsx(eq.mean$con, "deneme.xlsx")
setwd("C:/Users/ali emre karagül/Desktop")
openxlsx::write.xlsx(eq.mean$con, "deneme.xlsx")
eq.equipercentile
eq.equipercentile$con
Table2.7 <- cbind(0:40,eq.mean$con$yx,
eq.linear$con$yx,
eq.equipercentile$con$yx)
colnames(Table2.7) <- c("Score", "Mean", "Linear","Equipercentile")
Table2.7
eq.equipercentile <- equate(xACT, yACT,
method = "none", # düzgünleştirme yöntemi burada tanımlanabilir.
type = "equipercentile",
boot = TRUE, reps = 100)
eq.linear <- equate(xACT, yACT, type = "linear",
boot = TRUE, reps = 100)
eq.linear
eq.linear$con
eq.equipercentile$con
#eşitleme fonksiyonunu kuralım:
eq.mean <- equate(xACT, yACT, type = "mean",
boot = TRUE, reps = 100)
#her yönteme ait eşitlenmiş puanlar:
eq.mean$con
plot(0:40,eq.equipercentile$con$se,type="l",lty=2,xlim=c(5,40),ylim=c(0,0.5),xlab="Test X Score",ylab="Standard errors")
lines(0:40,eq.equipercentile$con$se.b,lty=1)
legend("topright",c("Bootstrap","Analytic"),lty=c(2,1))
plot(0:40,eq.equipercentile$con$se,type="l",lty=2,xlim=c(5,40),ylim=c(0,0.5),xlab="Test X Score",ylab="Standard errors")
lines(0:40,eq.equipercentile$con$se.b,lty=1)
legend("topright",c("Bootstrap","Analytic"),lty=c(2,1))
plot(0:40,eq.equipercentile$con$se.b,type="l",lty=2,xlim=c(5,40),ylim=c(0,0.5),xlab="Test X Score",ylab="Standard errors")
lines(0:40,eq.equipercentile$con$se,lty=1)
legend("topright",c("Bootstrap","Analytic"),lty=c(2,1))
Table2.7 <- cbind(0:40,eq.mean$con$yx, eq.linear$con$yx, eq.equipercentile$con$yx)
colnames(Table2.7) <- c("Score", "Mean", "Linear","Equipercentile")
Table2.7
#Kolen&Brennan, üç yöntemden elde edilen puanları karşılaştırmak için "Table2.7" adında bir tablo oluşturmuşlardır.
# Biz de aynı tabloyu R'da oluşturalım.
Table2.7 <- cbind(0:40,eq.mean$con$yx, eq.linear$con$yx, eq.equipercentile$con$yx)
colnames(Table2.7) <- c("Score", "Mean", "Linear","Equipercentile")
Table2.7
#üç yöntemden elde edilen eşitlenmiş puanların grafiksel gösterimi:
plot(eq.mean,
eq.linear,
eq.equipercentile,
lty=c(1,2,3,4),
col=c(3,4,5,6))
#üç yöntemden elde edilen eşitlenmiş puanların grafiksel gösterimi:
plot(eq.mean,
eq.linear,
eq.equipercentile,
lty=c(1,2,3,4),
col=c(3,4,5,6),
lwd=c(5,5,5,5))
#üç yöntemden elde edilen eşitlenmiş puanların grafiksel gösterimi:
plot(eq.mean,
eq.linear,
eq.equipercentile,
lty=c(1,2,3,4),
col=c(3,4,5,6),
lwd=c(3,3,3,3))
#üç yöntemden elde edilen eşitlenmiş puanların grafiksel gösterimi:
plot(eq.mean,
eq.linear,
eq.equipercentile,
lty=c(1,2,3,4),
col=c(3,4,5,1),
lwd=c(3,3,3,3))
#üç yöntemden elde edilen eşitlenmiş puanların grafiksel gösterimi:
plot(eq.mean,
eq.linear,
eq.equipercentile,
lty=c(1,2,3,4),
col=c(3,4,5,2),
lwd=c(3,3,3,3))
#üç yöntemden elde edilen eşitlenmiş puanların grafiksel gösterimi:
plot(eq.mean,
eq.linear,
eq.equipercentile,
lty=c(1,2,3,5),
col=c(3,4,5,6),
lwd=c(3,3,3,3))
#Table2.7'nin grafiksel gösterimi:
plot(eq.mean,
eq.linear,
eq.equipercentile,
lty=c(1,2,3,4),
col=c(3,4,5,6),
lwd=c(2,2,4,5))
legend("topright",c("Eq","Linear", "Mean"),lty=c(2,1,3))
plot(0:40,eq.equipercentile$con$se.b,type="l",lty=2,xlim=c(5,40),ylim=c(0,0.5),xlab="Test X Score",ylab="Standard errors")
lines(0:40,eq.linear$con$se.b,lty=1)
lines(0:40,eq.mean$con$se.b,lty=3)
legend("topright",c("Eq","Linear", "Mean"),lty=c(2,1,3))
plot(eq.mean,
eq.linear,
eq.equipercentile,
lty=c(1,2,3,4),
col=c(3,4,5,6),
lwd=c(2,2,4,5))
---
title: "Title"
#paketi R ortamına tanıtalım:
library(equate)
#Kullanılacak veriler Kolen&Brennan (2014)'dan. Eşdeğer gruplar deseni kullanılmıştır.
# Kolen & Brennan bu örneği kitaplarında birebir RAGE uygulaması ile yapmaktadır.
# Biz burada aynı uygulamayı R ile yapacağız.
# Frekans dağılımları şeklindeki datayı görelim:
ACTmath
#formları oluşturalım:
xACT <- as.freqtab(ACTmath[,c(1,2)], design = "eg")
yACT <- as.freqtab(ACTmath[,c(1,3)], design = "eg")
#eşitleme fonksiyonunu kuralım:
eq.mean <- equate(xACT, yACT, type = "mean",
boot = TRUE, reps = 100)# bootstrap ile hata hesaplaması yapalım. 100 tekrarlı simülasyon.
eq.linear <- equate(xACT, yACT, type = "linear",
boot = TRUE, reps = 100) # bootstrap ile hata hesaplaması yapalım. 100 tekrarlı simülasyon.
eq.equipercentile <- equate(xACT, yACT,
method = "none", # düzgünleştirme yöntemi burada tanımlanabilir. Şu an ihtiyacımız yok.
type = "equipercentile",
boot = TRUE, reps = 100)# bootstrap ile hata hesaplaması yapalım. 100 tekrarlı simülasyon.
# her yöntemin özet istatistikleri:
eq.mean
ACTmath
#formları oluşturalım:
xACT <- as.freqtab(ACTmath[,c(1,2)], design = "eg")
yACT <- as.freqtab(ACTmath[,c(1,3)], design = "eg")
yACT
#eşitleme fonksiyonunu kuralım:
eq.mean <- equate(xACT, yACT, type = "mean",
boot = TRUE, reps = 100)
eq.mean
eq.linear <- equate(xACT, yACT, type = "linear",
boot = TRUE, reps = 100)
eq.linear
eq.equipercentile <- equate(xACT, yACT,
method = "none", # düzgünleştirme yöntemi burada tanımlanabilir. Şu an ihtiyacımız yok.
type = "equipercentile",
boot = TRUE, reps = 100)
eq.equipercentile <- equate(xACT, yACT,
method = "none", # düzgünleştirme yöntemi burada tanımlanabilir. Şu an ihtiyacımız yok.
type = "equipercentile",
boot = TRUE, reps = 100)
eq.equipercentile
#her yönteme ait eşitlenmiş puanlar:
eq.mean$con
eq.linear$con
eq.equipercentile$con
#Üç yönteme ait bootstrap hata puanlarını bir grafik üzerinde görelim:
plot(0:40,eq.equipercentile$con$se.b,type="l",lty=2,xlim=c(5,40),ylim=c(0,0.5),xlab="Test X Score",ylab="Bootstrap Standard Errors")
lines(0:40,eq.linear$con$se.b,lty=1)
lines(0:40,eq.mean$con$se.b,lty=3)
legend("topright",c("Eq","Linear", "Mean"),lty=c(2,1,3))
plot(0:40,eq.equipercentile$con$se.b,type="l",lty=2,xlim=c(5,40),ylim=c(0,0.5),xlab="Test X Score",ylab="Standard errors")
lines(0:40,eq.equipercentile$con$se,lty=1)
legend("topright",c("Bootstrap","Analytic"),lty=c(2,1))
Table2.7 <- cbind(0:40,eq.mean$con$yx, eq.linear$con$yx, eq.equipercentile$con$yx)
colnames(Table2.7) <- c("Score", "Mean", "Linear","Equipercentile")
Table2.7
plot(eq.mean,
eq.linear,
eq.equipercentile,
lty=c(1,2,3,4),
col=c(3,4,5,6),
lwd=c(2,2,4,5))
eq.mean$con
eq.linear$con
eq.equipercentile$con
#paketi R ortamına tanıtalım:
library(equate)
# Frekans dağılımları şeklindeki datayı görelim:
ACTmath
#formları oluşturalım:
xACT <- as.freqtab(ACTmath[,c(1,2)], design = "eg")
yACT <- as.freqtab(ACTmath[,c(1,3)], design = "eg")
xACT
eq.mean <- equate(xACT, yACT, type = "mean",
boot = TRUE, reps = 100)
# her yöntemin özet istatistikleri:
eq.mean
eq.linear <- equate(xACT, yACT, type = "linear",
boot = TRUE, reps = 100)
eq.linear
eq.equipercentile <- equate(xACT, yACT,
method = "none", # düzgünleştirme yöntemi burada tanımlanabilir. Şu an ihtiyacımız yok.
type = "equipercentile",
boot = TRUE, reps = 100)
eq.equipercentile
#her yönteme ait eşitlenmiş puanlar:
eq.mean$con
eq.linear$con
eq.equipercentile$con
plot(0:40,eq.equipercentile$con$se.b,type="l",lty=2,xlim=c(5,40),ylim=c(0,0.5),xlab="Test X Score",ylab="Bootstrap Standard Errors")
lines(0:40,eq.linear$con$se.b,lty=1)
lines(0:40,eq.mean$con$se.b,lty=3)
legend("topright",c("Eq","Linear", "Mean"),lty=c(2,1,3))
plot(0:40,eq.equipercentile$con$se.b,type="l",lty=2,xlim=c(5,40),ylim=c(0,0.5),xlab="Test X Score",ylab="Standard errors")
lines(0:40,eq.equipercentile$con$se,lty=1)
legend("topright",c("Bootstrap","Analytic"),lty=c(2,1))
Table2.7 <- cbind(0:40,eq.mean$con$yx, eq.linear$con$yx, eq.equipercentile$con$yx)
colnames(Table2.7) <- c("Score", "Mean", "Linear","Equipercentile")
Table2.7
plot(eq.mean,
eq.linear,
eq.equipercentile,
lty=c(1,2,3,4),
col=c(3,4,5,6),
lwd=c(2,2,4,5))
