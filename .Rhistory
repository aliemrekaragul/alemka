head(test_data[,c("score","predictions")], 10)
plot(test_data$score, test_data$predictions,
xlab = "Actual Scores", ylab = "Predicted Scores",
main = "Actual vs. Predicted Scores")
#| warning: false
#| eval: true
#| echo: true
#| code-fold: false
#merge predictions to test data:
test_data$predictions <- round(predictions)
head(test_data[,c("score","predictions")], 10)
# Create a table of frequencies for 'score' values
score_frequency <- table(test_data$score)
# Adjust the size of points based on frequency
point_size <- 5 * score_frequency[test_data$score]
# Create the scatter plot with adjusted point size
plot(test_data$score, test_data$predictions,
xlab = "Actual Scores", ylab = "Predicted Scores",
main = "Actual vs. Predicted Scores",
pch = 16,  # Use solid points
cex = point_size)
#| warning: false
#| eval: true
#| echo: true
#| code-fold: false
#merge predictions to test data:
test_data$predictions <- round(predictions)
head(test_data[,c("score","predictions")], 10)
# Create a table of frequencies for 'score' values
score_frequency <- table(test_data$score)
# Adjust the size of points based on frequency
point_size <- 5 * score_frequency[test_data$score]
# Create the scatter plot with adjusted point size
plot(test_data$score, test_data$predictions,
xlab = "Actual Scores", ylab = "Predicted Scores",
main = "Actual vs. Predicted Scores",
pch = 16,  # Use solid points
cex = point_size)
#| warning: false
#| eval: true
#| echo: true
#| code-fold: false
#merge predictions to test data:
test_data$predictions <- round(predictions)
head(test_data[,c("score","predictions")], 10)
# Create a table of frequencies for 'score' values
score_frequency <- table(test_data$score)
# Adjust the size of points based on frequency
point_size <- score_frequency[test_data$score] / 100
# Create the scatter plot with adjusted point size
plot(test_data$score, test_data$predictions,
xlab = "Actual Scores", ylab = "Predicted Scores",
main = "Actual vs. Predicted Scores",
pch = 16,  # Use solid points
cex = point_size)
#| warning: false
#| eval: true
#| echo: true
#| code-fold: false
#merge predictions to test data:
test_data$predictions <- round(predictions)
head(test_data[,c("score","predictions")], 10)
# Create a table of frequencies for 'score' values
score_frequency <- table(test_data$score)
# Adjust the size of points based on frequency
point_size <- score_frequency[test_data$score] / 10
# Create the scatter plot with adjusted point size
plot(test_data$score, test_data$predictions,
xlab = "Actual Scores", ylab = "Predicted Scores",
main = "Actual vs. Predicted Scores",
pch = 16,  # Use solid points
cex = point_size)
#| warning: false
#| eval: true
#| echo: true
#| code-fold: false
#merge predictions to test data:
test_data$predictions <- round(predictions)
head(test_data[,c("score","predictions")], 10)
# Create a table of frequencies for 'score' values
score_frequency <- table(test_data$score)
# Adjust the size of points based on frequency
point_size <- score_frequency[test_data$score] / 100
# Create the scatter plot with adjusted point size
plot(test_data$score, test_data$predictions,
xlab = "Actual Scores", ylab = "Predicted Scores",
main = "Actual vs. Predicted Scores",
pch = 16,  # Use solid points
cex = point_size)
#| warning: false
#| eval: true
#| echo: true
#| code-fold: false
#merge predictions to test data:
test_data$predictions <- round(predictions)
head(test_data[,c("score","predictions")], 10)
# Create a table of frequencies for 'score' values
score_frequency <- table(test_data$score)
# Adjust the size of points based on frequency
point_size <- score_frequency[test_data$score] / 50
# Create the scatter plot with adjusted point size
plot(test_data$score, test_data$predictions,
xlab = "Actual Scores", ylab = "Predicted Scores",
main = "Actual vs. Predicted Scores",
pch = 16,  # Use solid points
cex = point_size)
#| warning: false
#| eval: true
#| echo: true
#| code-fold: false
#merge predictions to test data:
test_data$predictions <- round(predictions)
head(test_data[,c("score","predictions")], 10)
#| warning: false
#| eval: true
#| echo: true
#| code-fold: false
# Create the confusion matrix and print it
confusion_matrix <- table(test_data$predictions, test_data$score)
confusion_matrix
# Create a table of frequencies for 'score' values
score_frequency <- table(test_data$score)
# Adjust the size of points based on frequency
point_size <- score_frequency[test_data$score] / 50
# Create the scatter plot with adjusted point size
plot(test_data$score, test_data$predictions,
xlab = "Actual Scores", ylab = "Predicted Scores",
main = "Actual vs. Predicted Scores",
pch = 16,  # Use solid points
cex = point_size)
#| warning: false
#| eval: true
#| echo: true
#| code-fold: false
# Create the confusion matrix and print it
confusion_matrix <- table(test_data$predictions, test_data$score)
confusion_matrix
# Create a table of frequencies for 'score' values
score_frequency <- table(test_data$score)
# Adjust the size of points based on frequency
point_size <- score_frequency[test_data$score] / 50
# Create the scatter plot with adjusted point size
plot(test_data$predictions, test_data$score,
ylab = "Actual Scores", xlab = "Predicted Scores",
main = "Actual vs. Predicted Scores",
pch = 16,  # Use solid points
cex = point_size)
#| warning: false
#| eval: true
#| echo: true
#| code-fold: false
# Create the confusion matrix and print it
confusion_matrix <- table(test_data$predictions, test_data$score)
confusion_matrix
# Create a table of frequencies for 'score' values
score_frequency <- table(test_data$score)
# Adjust the size of points based on frequency
point_size <- score_frequency[test_data$score] / 50
# Create the scatter plot with adjusted point size
plot(test_data$score, test_data$predictions,
xlab = "Actual Scores", ylab = "Predicted Scores",
main = "Actual vs. Predicted Scores",
pch = 16,  # Use solid points
cex = point_size)
#| warning: false
#| eval: true
#| echo: true
#| code-fold: false
# Create a table of frequencies for 'score' values
score_frequency <- table(test_data$score)
score_frequency
# Adjust the size of points based on frequency
point_size <- score_frequency[test_data$score] / 50 # Divide by 50 or 100 to make points smaller
# Create the scatter plot with adjusted point size
plot(test_data$score, test_data$predictions,
xlab = "Actual Scores", ylab = "Predicted Scores",
main = "Actual vs. Predicted Scores",
pch = 16,  # Use solid points
cex = point_size)
#| warning: false
#| eval: true
#| echo: true
#| code-fold: false
library(ggplot2)
# Convert the confusion matrix to a data frame
confusion_df <- as.data.frame(as.table(confusion_matrix))
# Create the plot using ggplot2
ggplot(confusion_df, aes(x = Reference, y = Prediction, fill = Freq)) +
geom_tile() +
geom_text(aes(label = Freq), vjust = 1) +
scale_fill_gradient(low = "white", high = "blue") +
labs(
x = "Actual",
y = "Predicted",
fill = "Frequency"
) +
theme_minimal()
#| warning: false
#| eval: true
#| echo: true
#| code-fold: false
library(ggplot2)
# Convert the confusion matrix to a data frame
confusion_df <- as.data.frame(confusion_matrix)
# Create the plot using ggplot2
ggplot(confusion_df, aes(x = Reference, y = Prediction, fill = Freq)) +
geom_tile() +
geom_text(aes(label = Freq), vjust = 1) +
scale_fill_gradient(low = "white", high = "blue") +
labs(
x = "Actual",
y = "Predicted",
fill = "Frequency"
) +
theme_minimal()
#| warning: false
#| eval: true
#| echo: true
#| code-fold: false
library(ggplot2)
# Convert the confusion matrix to a data frame
confusion_df <- as.data.frame(confusion_matrix)
confusion_df
#| warning: false
#| eval: true
#| echo: true
#| code-fold: false
# Create the confusion matrix and print it
confusion_matrix <- confusionMatrix(test_data$predictions, test_data$score)
#| warning: false
#| eval: true
#| echo: true
#| code-fold: false
# Create the confusion matrix and print it
library(caret)
installed.packages("caret")
#| warning: false
#| eval: true
#| echo: true
#| code-fold: false
# Create the confusion matrix and print it
library(caret)
install.packages("caret")
install.packages("caret")
#| warning: false
#| eval: true
#| echo: true
#| code-fold: false
# Create the confusion matrix and print it
library(caret)
confusion_matrix <- confusionMatrix(test_data$predictions, test_data$score)
#| warning: false
#| eval: true
#| echo: true
#| code-fold: false
# Create the confusion matrix and print it
library(caret)
data<-merge(test_data$predictions, test_data$score)
confusion_matrix <- confusionMatrix(data)
#| warning: false
#| eval: true
#| echo: true
#| code-fold: false
# Create the confusion matrix and print it
library(caret)
data<-merge(test_data$predictions, test_data$score)
data
#| warning: false
#| eval: true
#| echo: true
#| code-fold: false
# Create the confusion matrix and print it
library(caret)
confusion_matrix <- confusionMatrix(test_data$predictions, test_data$score)
#| warning: false
#| eval: true
#| echo: true
#| code-fold: false
# Create the confusion matrix and print it
confusion_matrix <- table(test_data$predictions, test_data$score)
confusion_matrix
#| warning: false
#| eval: true
#| echo: true
#| code-fold: false
library(ggplot2)
heatmap(confusion_matrix,
col = colorRampPalette(c("white", "blue"))(20),
main = "Confusion Matrix",
xlab = "Actual",
ylab = "Predicted",
scale = "none",  # Use "none" to avoid scaling
cexRow = 1, cexCol = 1,  # Adjust text size
margins = c(10, 10))  # Add margins for labels
#| warning: false
#| eval: true
#| echo: true
#| code-fold: false
library(ggplot2)
heatmap(confusion_matrix,
col = colorRampPalette(c("white", "blue"))(20),
main = "Confusion Matrix",
xlab = "Actual",
ylab = "Predicted",
scale = "row",  # Use "none" to avoid scaling
cexRow = 1, cexCol = 1,  # Adjust text size
margins = c(10, 10))  # Add margins for labels
#| warning: false
#| eval: true
#| echo: true
#| code-fold: false
library(ggplot2)
heatmap(confusion_matrix,
col = colorRampPalette(c("white", "blue"))(20),
main = "Confusion Matrix",
xlab = "Actual",
ylab = "Predicted",
cexRow = 1, cexCol = 1,  # Adjust text size
margins = c(10, 10))  # Add margins for labels
#| warning: false
#| eval: true
#| echo: true
#| code-fold: false
library(ggplot2)
# Create a heatmap of the confusion matrix
heatmap(confusion_matrix,
col = colorRampPalette(c("white", "blue"))(20),
main = "Confusion Matrix",
xlab = "Actual",
ylab = "Predicted",
scale = "none",  # Use "none" to display raw values
cexRow = 1, cexCol = 1,  # Adjust text size
margins = c(10, 10))  # Add margins for labels
#| warning: false
#| eval: true
#| echo: true
#| code-fold: false
library(ggplot2)
confusion_matrix <- matrix(c(
4, 9, 0, 0, 0, 0,
2, 46, 171, 80, 2, 0,
0, 1, 36, 149, 24, 1,
0, 0, 0, 9, 5, 0,
0, 0, 0, 0, 0, 1
), nrow = 5)
# Create a heatmap of the confusion matrix
heatmap(confusion_matrix,
col = colorRampPalette(c("white", "blue"))(20),
main = "Confusion Matrix",
xlab = "Actual",
ylab = "Predicted",
scale = "none",  # Use "none" to display raw values
cexRow = 1, cexCol = 1,  # Adjust text size
margins = c(10, 10))  # Add margins for labels
#| warning: false
#| eval: true
#| echo: true
#| code-fold: false
library(ggplot2)
# Create a heatmap of the confusion matrix
heatmap(confusion_matrix,
col = colorRampPalette(c("white", "blue"))(20),
main = "Confusion Matrix",
xlab = "Actual",
ylab = "Predicted",
scale = "none",  # Use "none" to display raw values
cexRow = 1, cexCol = 1,  # Adjust text size
Rowv = NULL, Colv = NULL,  # Do not reorder rows or columns
labRow = row_names, labCol = col_names,
margins = c(10, 10))  # Add margins for labels
#| warning: false
#| eval: true
#| echo: true
#| code-fold: false
library(ggplot2)
# Define row and column names
row_names <- colnames(confusion_matrix)
col_names <- rownames(confusion_matrix)
# Create a heatmap of the confusion matrix
heatmap(confusion_matrix,
col = colorRampPalette(c("white", "blue"))(20),
main = "Confusion Matrix",
xlab = "Actual",
ylab = "Predicted",
scale = "none",  # Use "none" to display raw values
cexRow = 1, cexCol = 1,  # Adjust text size
Rowv = NULL, Colv = NULL,  # Do not reorder rows or columns
labRow = row_names, labCol = col_names,
margins = c(10, 10))  # Add margins for labels
#| warning: false
#| eval: true
#| echo: true
#| code-fold: false
library(ggplot2)
# Create a heatmap of the confusion matrix
heatmap(confusion_matrix,
col = colorRampPalette(c("white", "blue"))(20),
main = "Confusion Matrix",
xlab = "Actual",
ylab = "Predicted",
Rowv = NULL, Colv = NULL,  # Do not reorder rows or columns
margins = c(10, 10))  # Add margins for labels
#| warning: false
#| eval: true
#| echo: true
#| code-fold: false
library(gplots)
install.packages("gplots")
#| warning: false
#| eval: true
#| echo: true
#| code-fold: false
library(gplots)
# Create a heatmap of the confusion matrix
heatmap(confusion_matrix,
col = colorRampPalette(c("white", "blue"))(20),
main = "Confusion Matrix Heatmap",
xlab = "Actual",
ylab = "Predicted")
#| warning: false
#| eval: true
#| echo: true
#| code-fold: false
confusion_matrix <- as.matrix(confusion_matrix)  # Ensure it's a matrix
# Create a heatmap
heatmap(confusion_matrix,
col = heat.colors(10),  # You can choose a different color palette
main = "Confusion Matrix",
xlab = "Predicted Class",
ylab = "Actual Class")
#| warning: false
#| eval: true
#| echo: true
#| code-fold: false
# Assuming 'confusion_matrix' is your confusion matrix
confusion_matrix <- as.matrix(confusion_matrix)  # Ensure it's a matrix
# Define the desired order of classes
class_order <- c(1, 2, 3, 4, 5, 6)
# Reorder the rows and columns of the confusion matrix
confusion_matrix <- confusion_matrix[class_order, class_order]
#| warning: false
#| eval: true
#| echo: true
#| code-fold: false
# Assuming 'confusion_matrix' is your confusion matrix
# Load the ggplot2 library
library(ggplot2)
# Create the confusion matrix as a data frame
confusion_matrix <- as.data.frame(matrix(c(4, 9, 0, 0, 0, 0,
2, 46, 171, 80, 2, 0,
0, 1, 36, 149, 24, 1,
0, 0, 0, 9, 5, 0,
0, 0, 0, 0, 0, 1), ncol = 6, byrow = TRUE))
# Rename the columns and rows
colnames(confusion_matrix) <- c("1", "2", "3", "4", "5", "6")
rownames(confusion_matrix) <- c("2", "3", "4", "5", "6")
# Create a heatmap of the confusion matrix using ggplot2
ggplot(data = melt(confusion_matrix), aes(x = Var1, y = Var2, fill = value)) +
geom_tile() +
geom_text(aes(label = value), vjust = 1) +
scale_fill_gradient(low = "white", high = "blue") +
theme_minimal() +
labs(x = "Predicted", y = "Actual") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
#| warning: false
#| eval: true
#| echo: true
#| code-fold: false
# Assuming 'confusion_matrix' is your confusion matrix
# Load the ggplot2 library
library(ggplot2)
# Create the confusion matrix as a data frame
confusion_matrix <- as.data.frame(matrix(c(4, 9, 0, 0, 0, 0,
2, 46, 171, 80, 2, 0,
0, 1, 36, 149, 24, 1,
0, 0, 0, 9, 5, 0,
0, 0, 0, 0, 0, 1), ncol = 6, byrow = TRUE))
# Rename the columns and rows
colnames(confusion_matrix) <- c("1", "2", "3", "4", "5", "6")
rownames(confusion_matrix) <- c("2", "3", "4", "5", "6")
# Create a heatmap of the confusion matrix using ggplot2
ggplot(data = confusion_matrix, aes(x = Var1, y = Var2, fill = value)) +
geom_tile() +
geom_text(aes(label = value), vjust = 1) +
scale_fill_gradient(low = "white", high = "blue") +
theme_minimal() +
labs(x = "Predicted", y = "Actual") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
#| warning: false
#| eval: true
#| echo: true
#| code-fold: false
# Assuming 'confusion_matrix' is your confusion matrix
# Load the ggplot2 library
library(ggplot2)
# Create the confusion matrix as a data frame
confusion_matrix <- as.data.frame(matrix(c(4, 9, 0, 0, 0, 0,
2, 46, 171, 80, 2, 0,
0, 1, 36, 149, 24, 1,
0, 0, 0, 9, 5, 0,
0, 0, 0, 0, 0, 1), ncol = 6, byrow = TRUE))
# Rename the columns and rows
colnames(confusion_matrix) <- c("1", "2", "3", "4", "5", "6")
rownames(confusion_matrix) <- c("2", "3", "4", "5", "6")
# Create a heatmap of the confusion matrix using ggplot2
ggplot(data = melt(confusion_matrix), aes(x = Var1, y = Var2, fill = value)) +
geom_tile() +
geom_text(aes(label = value), vjust = 1) +
scale_fill_gradient(low = "white", high = "blue") +
theme_minimal() +
labs(x = "Predicted", y = "Actual") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
