data <- data %>%
separate(colm, into = c("st_surname", "colm"), sep = 14)
data <- data %>%
separate(colm, into = c("section", "colm"), sep = 6)
data <- data %>%
separate(colm, into = c("room_desk_id"), sep = 4)
data <- data %>%
separate(part_1, into = c("part_1"), sep = part1)
data <- data %>%
separate(part_2, into = c("part_2"), sep = part2)
data <- data %>%
separate(part_3, into = c("part_3"), sep = part3)
data <- data %>%
separate(part_4, into = c("part_4"), sep = part4)
data <- data %>%
separate(part_5, into = c("part_5"), sep = part5)
data <- data %>%
separate(part_6, into = c("part_6"), sep = part6)
#section adı ile burada ilgilen:
data$section <- gsub(" ", "", data$section)
#response set şekil ver:
data$part_1 <- str_split_fixed(data$part_1, "", part1)
data$part_2 <- str_split_fixed(data$part_2, "", part2)
data$part_3 <- str_split_fixed(data$part_3, "", part3)
data$part_4 <- str_split_fixed(data$part_4, "", part4)
data$part_5 <- str_split_fixed(data$part_5, "", part5)
data$part_6 <- str_split_fixed(data$part_6, "", part6)
if(requested_output == 1){ data<-data }else{
AK<-data[1,]
data<-subset(data, data$st_id     !=  "                "
& data$st_name      !=  "              "
& data$st_surname      !=  "              " )
data<-rbind(AK, data)
row.names(data)<- 1:nrow(data)
}
if (part4 == 1 & part3 != 1) {
respo <- as.data.frame(cbind(data$part_1[, 1:part1],
data$part_2[, 1:part2],
data$part_3[, 1:part3]))
}else if(part3 == 1 & part4 == 1){
respo <- as.data.frame(cbind(data$part_1[, 1:part1],
data$part_2[, 1:part2]))
}else{
respo <- as.data.frame(cbind(data$part_1[, 1:part1],
data$part_2[, 1:part2],
data$part_3[, 1:part3],
data$part_4[, 1:part4]))
}
unscored_respo <- as.matrix(sapply(respo,
function(functiondata)
as.numeric(
gsub("A", 1,
gsub("B", 2,
gsub("C", 3,
gsub("D", 4,
gsub("E", 5, functiondata)
)))
))))
anskey <- as.matrix(unscored_respo[1, 1:ncol(unscored_respo)])
scored_respo <- key2binary(unscored_respo, anskey, score_missing = TRUE)
colnames(scored_respo) <- paste0("item", 1:ncol(scored_respo))
data_for_distractorAnal <- as.matrix(drop_na(as.data.frame(unscored_respo)))
ans_for_distractorAnal <- as.character(anskey)
results <- as.data.frame(scored_respo)
if (part4 == 1 & part3 != 1) {
results$total_part_1 <- rowSums(results[, 1:part1])
results$total_part_2 <- rowSums(results[, (part1 + 1):(part1 + part2)])
results$total_part_3 <- rowSums(results[, (1 + part1 + part2):(part1 + part2 + part3)])
results$conv_part_1 <- (results$total_part_1 * max_score_part1) / part1
results$conv_part_2 <- (results$total_part_2 * max_score_part2) / part2
results$conv_part_3 <- (results$total_part_3 * max_score_part3) / part3
# requested_output 6: 1/3
sumstats <- rbind(
summary(results$conv_part_1),
summary(results$conv_part_2),
summary(results$conv_part_3)
)
rownames(sumstats) <- c("Part-1:", "Part-2:", "Part-3:")
}else if(part3 == 1 & part4 == 1){
results$total_part_1 <- rowSums(results[, 1:part1])
results$total_part_2 <- rowSums(results[, (part1 + 1):(part1 + part2)])
results$conv_part_1 <- (results$total_part_1 * max_score_part1) / part1
results$conv_part_2 <- (results$total_part_2 * max_score_part2) / part2
# requested_output 6: 2/3
sumstats <- rbind(
summary(results$conv_part_1),
summary(results$conv_part_2)
)
rownames(sumstats) <- c("Part-1:", "Part-2:")
}else{
results$total_part_1 <- rowSums(results[, 1:part1])
results$total_part_2 <- rowSums(results[, (part1 + 1):(part1 + part2)])
results$total_part_3 <- rowSums(results[, (1 + part1 + part2):(part1 + part2 + part3)])
results$total_part_4 <- rowSums(results[, (1 + part1 + part2 + part3):(part1 + part2 + part3 + part4)])
results$conv_part_1 <- (results$total_part_1 * max_score_part1) / part1
results$conv_part_2 <- (results$total_part_2 * max_score_part2) / part2
results$conv_part_3 <- (results$total_part_3 * max_score_part3) / part3
results$conv_part_4 <- (results$total_part_4 * max_score_part4) / part4
# requested_output 6: 3/3
sumstats <- rbind(
summary(results$conv_part_1),
summary(results$conv_part_2),
summary(results$conv_part_3),
summary(results$conv_part_4)
)
rownames(sumstats) <- c("Part-1:", "Part-2:", "Part-3:", "Part-4:")
}
#requested_output 1 :EXAM TAKER REPORT:
exam_results <- as.data.frame(cbind(
data$st_id,
data$st_name,
data$st_surname,
data$section,
respo,
results
))
if (part4 == 1 & part3 != 1) {
st_resp_itemnames <-
paste0("st_resp@item", 1:(part1 + part2 + part3 ))
dicho_itemnames <- paste0("item", 1:(part1 + part2 + part3 ))
colnames(exam_results) <-
c(
"st_id",
"st_name",
"st_fam.name",
"section",
st_resp_itemnames,
dicho_itemnames,
"Truescore@part1",
"Truescore@part2",
"Truescore@part3",
"conv_sco@part1",
"conv_sco@part2",
"conv_sco@part3"
)
}else if(part3 == 1 & part4 == 1){
st_resp_itemnames <-
paste0("st_resp@item", 1:(part1 + part2))
dicho_itemnames <- paste0("item", 1:(part1 + part2))
colnames(exam_results) <-
c(
"st_id",
"st_name",
"st_fam.name",
"section",
st_resp_itemnames,
dicho_itemnames,
"Truescore@part1",
"Truescore@part2",
"conv_sco@part1",
"conv_sco@part2"
)
}else{
st_resp_itemnames <-
paste0("st_resp@item", 1:(part1 + part2 + part3 + part4))
dicho_itemnames <- paste0("item", 1:(part1 + part2 + part3 + part4))
colnames(exam_results) <-
c(
"st_id",
"st_name",
"st_fam.name",
"section",
st_resp_itemnames,
dicho_itemnames,
"Truescore@part1",
"Truescore@part2",
"Truescore@part3",
"Truescore@part4",
"conv_sco@part1",
"conv_sco@part2",
"conv_sco@part3",
"conv_sco@part4"
)
}
#requested_output 2: ITEM LEVEL ANALYSIS:
scored_respo<-scored_respo[ rowSums(scored_respo[,-1]) > 0, ]
#item_stats<- ItemAnalysis(scored_respo)
difficulties<-round(colMeans(scored_respo),2)
discriminations<-round(item.total(scored_respo)$Item.Total,2)
disc.Labels<-labelDiscriminations(discriminations)
diff.Labels<-labelDifficulties(difficulties)
item_stats<- cbind(difficulties, discriminations, disc.Labels,diff.Labels )
colnames(item_stats)<- c("difficulty index", "discrimination index", "difficulty comment", "discrimination comment")
#requested_output 7:TEST LEVEL ANALYSIS:
mytable<-table( diff.Labels, disc.Labels)
#requested_output 3:TEST LEVEL ANALYSIS:
#güvenirlik katsatısı
alpha_index<-cronbach.alpha(scored_respo)
#requested_output 4:OPTION LEVEL ANALYSIS:
if (p_table=="Counts"){p_table<-FALSE } else{ p_table<-TRUE}
option_level_stats <- ShinyItemAnalysis::DistractorAnalysis(data_for_distractorAnal,
ans_for_distractorAnal,
p.table  = p_table, num.groups=3)
if(requested_output == 1){ return(exam_results)}
if(requested_output == 2){ return(item_stats)}
if(requested_output == 3){ return(alpha_index)}
if(requested_output == 4){ return(option_level_stats )}
if(requested_output == 5){ return(as.data.frame(scored_respo))}
if(requested_output == 6){ return(as.data.frame(sumstats))}
if(requested_output == 7){ return(mytable)}
}
labelDifficulties<-function (itemDifficulties){
difficultycommemnt <- c()
for (difficulty in 1:length(itemDifficulties)){
if(itemDifficulties[difficulty] <= 0.2){difficultycommemnt[difficulty]<- "difficult"
}else if(itemDifficulties[difficulty] > 0.2 & itemDifficulties[difficulty] < 0.8){difficultycommemnt[difficulty]<- "moderate"
}else{difficultycommemnt[difficulty]<- "easy"
}
}
return(difficultycommemnt)
}
labelDiscriminations<- function(itemDiscriminations){
discriminationcomment<-c()
for (discrimination in 1:length(itemDiscriminations)) {
if(itemDiscriminations[discrimination] <= 0 | is.na(itemDiscriminations[discrimination] )  ){discriminationcomment[discrimination]<- "DISCARD"
}else if(itemDiscriminations[discrimination] <= 0.2 & itemDiscriminations[discrimination] > 0){ discriminationcomment[discrimination]<- "revise"
}else if(itemDiscriminations[discrimination] <= 0.3 & itemDiscriminations[discrimination] > 0.2){ discriminationcomment[discrimination]<- "mediocre"
}else if(itemDiscriminations[discrimination] <= 0.4 & itemDiscriminations[discrimination] > 0.3){ discriminationcomment[discrimination]<- "good"
}else if(itemDiscriminations[discrimination] > 0.4){ discriminationcomment[discrimination]<- "very good"
}
}
return(discriminationcomment)
}
asd1<-main_function("sample.dat", 10, 10, 10, 10, 100, 100, 100, 100, 1)
asd1<-main_function("sample.dat", 10, 10, 10, 10, 100, 100, 100, 100, "counts", 1)
library(tidyverse)
library(dplyr)
library(tidyr)
library(psych)
library(openxlsx)
library(DT)
library(stringr)
library(mirt)
library(psychometric)
library(ltm)
library(corrplot)
library(CTT)
library(ShinyItemAnalysis)
main_function<- function ( datapath,
a, b, c, d,
x, y, z, w,
requested_output=c(1:7),
p_table=NULL){
#N of items
part1<-a
if (b != 0){part2<-b}else{part2<-1}
if (c != 0){part3<-c}else{part3<-1}
if (d != 0){part4<-d}else{part4<-1}
#max Converted scores
max_score_part1<-x
if (y != 0){max_score_part2<-y}else{max_score_part2<-1}
if (z != 0){max_score_part3<-z}else{max_score_part3<-1}
if (w != 0){max_score_part4<-w}else{max_score_part4<-1}
part5 <- 1#input$part5
part6 <- 1#input$part6
tbl <- read.delim(datapath, header = FALSE, dec = " ")
data <- str_split_fixed(tbl[, 1], "N", 2)
data <- as.data.frame(data[,-1])
colnames(data) <- "v1"
#türkçe karakterleri dönüştür:
data$v1 <- gsub('<dd>', 'I', data$v1)
data$v1 <- gsub('<d6>', 'O', data$v1)
data$v1 <- gsub('<de>', 'S', data$v1)
data$v1 <- gsub('<d0>', 'G', data$v1)
data$v1 <- gsub('<c7>', 'C', data$v1)
data$v1 <- gsub('<dc>', 'U', data$v1)
#(custom) N of chars in each section on the optical form
data <- data %>%
separate(v1, into = c("st_id", "colm"), sep = 15)
data <- data %>%
separate(colm, into = c("part_1", "colm"), sep = 50)
data <- data %>%
separate(colm, into = c("part_2", "colm"), sep = 50)
data <- data %>%
separate(colm, into = c("part_3", "colm"), sep = 50)
data <- data %>%
separate(colm, into = c("part_4", "colm"), sep = 50)
data <- data %>%
separate(colm, into = c("part_5", "colm"), sep = 50)
data <- data %>%
separate(colm, into = c("part_6", "colm"), sep = 50)
data <- data %>%
separate(colm, into = c("st_name", "colm"), sep = 14)
data <- data %>%
separate(colm, into = c("st_surname", "colm"), sep = 14)
data <- data %>%
separate(colm, into = c("section", "colm"), sep = 6)
data <- data %>%
separate(colm, into = c("room_desk_id"), sep = 4)
data <- data %>%
separate(part_1, into = c("part_1"), sep = part1)
data <- data %>%
separate(part_2, into = c("part_2"), sep = part2)
data <- data %>%
separate(part_3, into = c("part_3"), sep = part3)
data <- data %>%
separate(part_4, into = c("part_4"), sep = part4)
data <- data %>%
separate(part_5, into = c("part_5"), sep = part5)
data <- data %>%
separate(part_6, into = c("part_6"), sep = part6)
#section adı ile burada ilgilen:
data$section <- gsub(" ", "", data$section)
#response set şekil ver:
data$part_1 <- str_split_fixed(data$part_1, "", part1)
data$part_2 <- str_split_fixed(data$part_2, "", part2)
data$part_3 <- str_split_fixed(data$part_3, "", part3)
data$part_4 <- str_split_fixed(data$part_4, "", part4)
data$part_5 <- str_split_fixed(data$part_5, "", part5)
data$part_6 <- str_split_fixed(data$part_6, "", part6)
if(requested_output == 1){ data<-data }else{
AK<-data[1,]
data<-subset(data, data$st_id     !=  "                "
& data$st_name      !=  "              "
& data$st_surname      !=  "              " )
data<-rbind(AK, data)
row.names(data)<- 1:nrow(data)
}
if (part4 == 1 & part3 != 1) {
respo <- as.data.frame(cbind(data$part_1[, 1:part1],
data$part_2[, 1:part2],
data$part_3[, 1:part3]))
}else if(part3 == 1 & part4 == 1){
respo <- as.data.frame(cbind(data$part_1[, 1:part1],
data$part_2[, 1:part2]))
}else{
respo <- as.data.frame(cbind(data$part_1[, 1:part1],
data$part_2[, 1:part2],
data$part_3[, 1:part3],
data$part_4[, 1:part4]))
}
unscored_respo <- as.matrix(sapply(respo,
function(functiondata)
as.numeric(
gsub("A", 1,
gsub("B", 2,
gsub("C", 3,
gsub("D", 4,
gsub("E", 5, functiondata)
)))
))))
anskey <- as.matrix(unscored_respo[1, 1:ncol(unscored_respo)])
scored_respo <- key2binary(unscored_respo, anskey, score_missing = TRUE)
colnames(scored_respo) <- paste0("item", 1:ncol(scored_respo))
data_for_distractorAnal <- as.matrix(drop_na(as.data.frame(unscored_respo)))
ans_for_distractorAnal <- as.character(anskey)
results <- as.data.frame(scored_respo)
if (part4 == 1 & part3 != 1) {
results$total_part_1 <- rowSums(results[, 1:part1])
results$total_part_2 <- rowSums(results[, (part1 + 1):(part1 + part2)])
results$total_part_3 <- rowSums(results[, (1 + part1 + part2):(part1 + part2 + part3)])
results$conv_part_1 <- (results$total_part_1 * max_score_part1) / part1
results$conv_part_2 <- (results$total_part_2 * max_score_part2) / part2
results$conv_part_3 <- (results$total_part_3 * max_score_part3) / part3
# requested_output 6: 1/3
sumstats <- rbind(
summary(results$conv_part_1),
summary(results$conv_part_2),
summary(results$conv_part_3)
)
rownames(sumstats) <- c("Part-1:", "Part-2:", "Part-3:")
}else if(part3 == 1 & part4 == 1){
results$total_part_1 <- rowSums(results[, 1:part1])
results$total_part_2 <- rowSums(results[, (part1 + 1):(part1 + part2)])
results$conv_part_1 <- (results$total_part_1 * max_score_part1) / part1
results$conv_part_2 <- (results$total_part_2 * max_score_part2) / part2
# requested_output 6: 2/3
sumstats <- rbind(
summary(results$conv_part_1),
summary(results$conv_part_2)
)
rownames(sumstats) <- c("Part-1:", "Part-2:")
}else{
results$total_part_1 <- rowSums(results[, 1:part1])
results$total_part_2 <- rowSums(results[, (part1 + 1):(part1 + part2)])
results$total_part_3 <- rowSums(results[, (1 + part1 + part2):(part1 + part2 + part3)])
results$total_part_4 <- rowSums(results[, (1 + part1 + part2 + part3):(part1 + part2 + part3 + part4)])
results$conv_part_1 <- (results$total_part_1 * max_score_part1) / part1
results$conv_part_2 <- (results$total_part_2 * max_score_part2) / part2
results$conv_part_3 <- (results$total_part_3 * max_score_part3) / part3
results$conv_part_4 <- (results$total_part_4 * max_score_part4) / part4
# requested_output 6: 3/3
sumstats <- rbind(
summary(results$conv_part_1),
summary(results$conv_part_2),
summary(results$conv_part_3),
summary(results$conv_part_4)
)
rownames(sumstats) <- c("Part-1:", "Part-2:", "Part-3:", "Part-4:")
}
#requested_output 1 :EXAM TAKER REPORT:
exam_results <- as.data.frame(cbind(
data$st_id,
data$st_name,
data$st_surname,
data$section,
respo,
results
))
if (part4 == 1 & part3 != 1) {
st_resp_itemnames <-
paste0("st_resp@item", 1:(part1 + part2 + part3 ))
dicho_itemnames <- paste0("item", 1:(part1 + part2 + part3 ))
colnames(exam_results) <-
c(
"st_id",
"st_name",
"st_fam.name",
"section",
st_resp_itemnames,
dicho_itemnames,
"Truescore@part1",
"Truescore@part2",
"Truescore@part3",
"conv_sco@part1",
"conv_sco@part2",
"conv_sco@part3"
)
}else if(part3 == 1 & part4 == 1){
st_resp_itemnames <-
paste0("st_resp@item", 1:(part1 + part2))
dicho_itemnames <- paste0("item", 1:(part1 + part2))
colnames(exam_results) <-
c(
"st_id",
"st_name",
"st_fam.name",
"section",
st_resp_itemnames,
dicho_itemnames,
"Truescore@part1",
"Truescore@part2",
"conv_sco@part1",
"conv_sco@part2"
)
}else{
st_resp_itemnames <-
paste0("st_resp@item", 1:(part1 + part2 + part3 + part4))
dicho_itemnames <- paste0("item", 1:(part1 + part2 + part3 + part4))
colnames(exam_results) <-
c(
"st_id",
"st_name",
"st_fam.name",
"section",
st_resp_itemnames,
dicho_itemnames,
"Truescore@part1",
"Truescore@part2",
"Truescore@part3",
"Truescore@part4",
"conv_sco@part1",
"conv_sco@part2",
"conv_sco@part3",
"conv_sco@part4"
)
}
#requested_output 2: ITEM LEVEL ANALYSIS:
scored_respo<-scored_respo[ rowSums(scored_respo[,-1]) > 0, ]
#item_stats<- ItemAnalysis(scored_respo)
difficulties<-round(colMeans(scored_respo),2)
discriminations<-round(item.total(scored_respo)$Item.Total,2)
disc.Labels<-labelDiscriminations(discriminations)
diff.Labels<-labelDifficulties(difficulties)
item_stats<- cbind(difficulties, discriminations, disc.Labels,diff.Labels )
colnames(item_stats)<- c("difficulty index", "discrimination index", "difficulty comment", "discrimination comment")
#requested_output 7:TEST LEVEL ANALYSIS:
mytable<-table( diff.Labels, disc.Labels)
#requested_output 3:TEST LEVEL ANALYSIS:
#güvenirlik katsatısı
alpha_index<-cronbach.alpha(scored_respo)
#requested_output 4:OPTION LEVEL ANALYSIS:
if (p_table=="Counts"){p_table<-FALSE } else{ p_table<-TRUE}
option_level_stats <- ShinyItemAnalysis::DistractorAnalysis(data_for_distractorAnal,
ans_for_distractorAnal,
p.table  = p_table, num.groups=3)
if(requested_output == 1){ return(exam_results)}
if(requested_output == 2){ return(item_stats)}
if(requested_output == 3){ return(alpha_index)}
if(requested_output == 4){ return(option_level_stats )}
if(requested_output == 5){ return(as.data.frame(scored_respo))}
if(requested_output == 6){ return(as.data.frame(sumstats))}
if(requested_output == 7){ return(mytable)}
}
labelDifficulties<-function (itemDifficulties){
difficultycommemnt <- c()
for (difficulty in 1:length(itemDifficulties)){
if(itemDifficulties[difficulty] <= 0.2){difficultycommemnt[difficulty]<- "difficult"
}else if(itemDifficulties[difficulty] > 0.2 & itemDifficulties[difficulty] < 0.8){difficultycommemnt[difficulty]<- "moderate"
}else{difficultycommemnt[difficulty]<- "easy"
}
}
return(difficultycommemnt)
}
labelDiscriminations<- function(itemDiscriminations){
discriminationcomment<-c()
for (discrimination in 1:length(itemDiscriminations)) {
if(itemDiscriminations[discrimination] <= 0 | is.na(itemDiscriminations[discrimination] )  ){discriminationcomment[discrimination]<- "DISCARD"
}else if(itemDiscriminations[discrimination] <= 0.2 & itemDiscriminations[discrimination] > 0){ discriminationcomment[discrimination]<- "revise"
}else if(itemDiscriminations[discrimination] <= 0.3 & itemDiscriminations[discrimination] > 0.2){ discriminationcomment[discrimination]<- "mediocre"
}else if(itemDiscriminations[discrimination] <= 0.4 & itemDiscriminations[discrimination] > 0.3){ discriminationcomment[discrimination]<- "good"
}else if(itemDiscriminations[discrimination] > 0.4){ discriminationcomment[discrimination]<- "very good"
}
}
return(discriminationcomment)
}
asd1<-main_function("sample.dat", 10, 10, 10, 10, 100, 100, 100, 100, "Counts", 1)
asd1<-main_function("sample.dat", 10, 10, 10, 0, 100, 100, 100, 0, "Counts", 1)
asd1<-main_function("sample.dat", 10, 10, 10, 0, 100, 100, 100, 0, "Counts", 1)
runApp()
quarto install extension schochastics/quarto-social-share
>>>>>>> parent of 713d634 (google-fit)
