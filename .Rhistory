ShinyItemAnalysis::ItemAnalysis(my_data)
#| warning: false
#| eval: true
#| echo: false
#| code-fold: false
library(multilevel)
library(ShinyItemAnalysis)
#| warning: false
#| eval: true
#| echo: true
#| code-fold: false
my_data<-read.csv("data for post about item difficulty and discrimination.csv",sep=";", header = TRUE)
head(my_data)
#| warning: false
#| eval: true
#| echo: true
#| code-fold: false
# Calculate item difficulty
item_difficulty <- colMeans(my_data)
item_difficulty
#| warning: false
#| eval: true
#| echo: true
#| code-fold: false
#get the total score for each participant
total_score <- rowSums(my_data)
#There are 40 items in the test:
# item_discrimination <- 40
#calculate rpb for each item:
for(i in 1:40){
item_discrimination[i] <- cor(total_score, my_data[,i])
}
round(item_discrimination,4)
#| warning: false
#| eval: true
#| echo: true
#| code-fold: false
#get the total score for each participant
total_score <- rowSums(my_data)
#There are 40 items in the test:
# item_discrimination <- 40
#calculate rpb for each item:
for(i in 1:40){
item_discrimination[i] <- cor(total_score, my_data[,i])
}
round(item_discrimination,4)
#| warning: false
#| eval: true
#| echo: true
#| code-fold: false
#get the total score for each participant
total_score <- rowSums(my_data)
#There are 40 items in the test:
# item_discrimination <- 40
#calculate rpb for each item:
for(i in 1:40){
item_discrimination[i] <- cor(total_score, my_data[,i])
}
round(item_discrimination,4)
#| warning: false
#| eval: true
#| echo: true
#| code-fold: false
#get the total score for each participant
total_score <- rowSums(my_data)
#There are 40 items in the test:
# item_discrimination <- 40
#calculate rpb for each item:
for(i in 1:40){
item_discriminations[i] <- cor(total_score, my_data[,i])
}
#| warning: false
#| eval: true
#| echo: true
#| code-fold: false
#get the total score for each participant
total_score <- rowSums(my_data)
#There are 40 items in the test:
item_discrimination <- 40
#calculate rpb for each item:
for(i in 1:40){
item_discrimination[i] <- cor(total_score, my_data[,i])
}
round(item_discrimination,4)
#| warning: false
#| eval: true
#| echo: false
#| code-fold: false
library(multilevel)
library(ShinyItemAnalysis)
#| warning: false
#| eval: true
#| echo: true
#| code-fold: false
my_data<-read.csv("data for post about item difficulty and discrimination.csv",sep=";", header = TRUE)
head(my_data)
#| warning: false
#| eval: true
#| echo: true
#| code-fold: false
# Calculate item difficulty
item_difficulty <- colMeans(my_data)
item_difficulty
#| warning: false
#| eval: true
#| echo: true
#| code-fold: false
#get the total score for each participant
total_score <- rowSums(my_data)
#There are 40 items in the test:
item_discrimination1 <- 40
#calculate rpb for each item:
for(i in 1:40){
item_discrimination1[i] <- cor(total_score, my_data[,i])
}
round(item_discrimination1,4)
#| warning: false
#| eval: true
#| echo: true
#| code-fold: false
item_discrimination2<-multilevel::item.total(my_data)
item_discrimination2$Item.Total
#| warning: false
#| eval: true
#| echo: true
#| code-fold: false
item_discrimination3<-ShinyItemAnalysis::gDiscrim(my_data)
item_discrimination3
#| warning: false
#| eval: true
#| echo: true
#| code-fold: false
my_data<-read.csv("data for post about item difficulty and discrimination.csv",sep=";", header = TRUE)
#head(my_data)
DT::datatable(knitr::kable(my_data))
#head(my_data)
str(my_data)
#| warning: false
#| eval: true
#| echo: true
#| code-fold: false
item_stats<-ShinyItemAnalysis::ItemAnalysis(my_data)
head(item_stats)
knitr::kable(item_Stats)
#| warning: false
#| eval: true
#| echo: true
#| code-fold: false
library(multilevel)
library(ShinyItemAnalysis)
#| warning: false
#| eval: true
#| echo: true
#| code-fold: false
my_data<-read.csv("data for post about item difficulty and discrimination.csv",sep=";", header = TRUE)
head(my_data)
#| warning: false
#| eval: true
#| echo: true
#| code-fold: false
# Calculate item difficulty
item_difficulty <- colMeans(my_data)
item_difficulty
#| warning: false
#| eval: true
#| echo: true
#| code-fold: false
#get the total score for each participant
total_score <- rowSums(my_data)
#There are 40 items in the test:
item_discrimination1 <- 40
#calculate rpb for each item:
for(i in 1:40){
item_discrimination1[i] <- cor(total_score, my_data[,i])
}
round(item_discrimination1,4)
#| warning: false
#| eval: true
#| echo: true
#| code-fold: false
item_discrimination2<-multilevel::item.total(my_data)
item_discrimination2$Item.Total
#| warning: false
#| eval: true
#| echo: true
#| code-fold: false
item_discrimination3<-ShinyItemAnalysis::gDiscrim(my_data)
item_discrimination3
#| warning: false
#| eval: true
#| echo: true
#| code-fold: false
item_stats<-ShinyItemAnalysis::ItemAnalysis(my_data)
head(item_stats)
knitr::kable(item_Stats)
item_stats<-ShinyItemAnalysis::ItemAnalysis(my_data)
head(item_stats)
knitr::kable(item_stats)
#| warning: false
#| eval: true
#| echo: true
#| code-fold: false
item_stats<-round(ShinyItemAnalysis::ItemAnalysis(my_data),2)
head(item_stats)
knitr::kable(item_stats)
knitr::opts_chunk$set(echo = FALSE)
#| warning: false
#| eval: true
#| echo: true
#| code-fold: false
library(rvest)
library(dplyr)
library(tm)
library(stopwords)
library(wordcloud)
library(wordcloud2)
#| warning: false
#| eval: true
#| echo: true
#| code-fold: false
html <- read_html("https://eksisozluk.com/veri-bilimi--3426406")
#| warning: false
#| eval: true
#| echo: true
#| code-fold: false
html <- read_html("https://eksisozluk.com/veri-bilimi--3426406")
read_html("https://eksisozluk.com/veri-bilimi--3426406")
#| warning: false
#| eval: true
#| echo: true
#| code-fold: false
#round is for rounding the values in the results.
item_stats<-round(ShinyItemAnalysis::ItemAnalysis(my_data),2)
#to see all the output in a table:
knitr::kable(item_stats)
#| warning: false
#| eval: true
#| echo: true
#| code-fold: false
library(multilevel)
library(ShinyItemAnalysis)
#| warning: false
#| eval: true
#| echo: true
#| code-fold: false
my_data<-read.csv("data for post about item difficulty and discrimination.csv",sep=";", header = TRUE)
head(my_data)
#| warning: false
#| eval: true
#| echo: true
#| code-fold: false
# Calculate item difficulty
item_difficulty <- colMeans(my_data)
item_difficulty
#| warning: false
#| eval: true
#| echo: true
#| code-fold: false
#get the total score for each participant
total_score <- rowSums(my_data)
#There are 40 items in the test:
item_discrimination1 <- 40
#calculate rpb for each item:
for(i in 1:40){
item_discrimination1[i] <- cor(total_score, my_data[,i])
}
round(item_discrimination1,4)
#| warning: false
#| eval: true
#| echo: true
#| code-fold: false
item_discrimination2<-multilevel::item.total(my_data)
item_discrimination2$Item.Total
#| warning: false
#| eval: true
#| echo: true
#| code-fold: false
item_discrimination3<-ShinyItemAnalysis::gDiscrim(my_data)
item_discrimination3
#| warning: false
#| eval: true
#| echo: true
#| code-fold: false
#round is for rounding the values in the results.
item_stats<-round(ShinyItemAnalysis::ItemAnalysis(my_data),2)
#to see all the output in a table:
item_stats<-knitr::kable(item_stats)
DT::datatable(item_stats)
#| warning: false
#| eval: true
#| echo: true
#| code-fold: false
#round is for rounding the values in the results.
item_stats<-round(ShinyItemAnalysis::ItemAnalysis(my_data),2)
#to see all the output in a table:
knitr::kable(head(item_stats), 10)
#| warning: false
#| eval: true
#| echo: true
#| code-fold: false
#round is for rounding the values in the results.
item_stats<-round(ShinyItemAnalysis::ItemAnalysis(my_data),2)
#to see all the output in a table:
knitr::kable(head(item_stats), 10))
#| warning: false
#| eval: true
#| echo: true
#| code-fold: false
#round is for rounding the values in the results.
item_stats<-round(ShinyItemAnalysis::ItemAnalysis(my_data),2)
#to see all the output in a table:
knitr::kable(item_stats)
library(ggplot2)
# Create some example data
data <- matrix(runif(100, 0, 1), nrow = 10)
# Create a heatmap using ggplot2
ggplot(data = melt(data)) +
geom_tile(aes(x = Var2, y = Var1, fill = value)) +
scale_fill_gradient(low = "white", high = "blue") +
theme_minimal()
?melt()
library(reshape2)
# Create some example data
data <- matrix(runif(100, 0, 1), nrow = 10)
# Create a heatmap using ggplot2
ggplot(data = melt(data)) +
geom_tile(aes(x = Var2, y = Var1, fill = value)) +
scale_fill_gradient(low = "white", high = "blue") +
theme_minimal()
# Create a heatmap using ggplot2
ggplot2::ggplot(data = reshape2::melt(data)) +
geom_tile(aes(x = Var2, y = Var1, fill = value)) +
scale_fill_gradient(low = "white", high = "blue") +
theme_minimal()
# Create a heatmap using ggplot2
ggplot2::ggplot(data = reshape2::melt(data)) +
geom_tile(aes(x = Var2, y = Var1, fill = value)) +
scale_fill_gradient(low = "white", high = "red") +
theme_minimal()
# Create a heatmap using ggplot2
ggplot2::ggplot(data = reshape2::melt(data)) +
geom_tile(aes(x = Var2, y = Var1, fill = value)) +
scale_fill_gradient(low = "red", high = "green") +
theme_minimal()
white
# Create a heatmap using ggplot2
ggplot2::ggplot(data = reshape2::melt(data)) +
geom_tile(aes(x = Var2, y = Var1, fill = value)) +
scale_fill_gradient(low = "white", high = "green") +
theme_minimal()
# Create a heatmap using ggplot2
ggplot2::ggplot(data = reshape2::melt(data)) +
geom_tile(aes(x = Var2, y = Var1, fill = value)) +
scale_fill_gradient(low = "white", high = "red") +
theme_minimal()
# Create a heatmap using ggplot2
ggplot2::ggplot(data = reshape2::melt(data)) +
geom_tile(aes(x = Var2, y = Var1, fill = value)) +
scale_fill_gradient(low = "blue", high = "red") +
theme_minimal()
# Create a heatmap using ggplot2
ggplot2::ggplot(data = reshape2::melt(data)) +
geom_tile(aes(x = Var2, y = Var1, fill = value)) +
scale_fill_gradient(low = "orange", high = "red") +
theme_minimal()
# Create a heatmap using ggplot2
ggplot2::ggplot(data = reshape2::melt(data)) +
geom_tile(aes(x = Var2, y = Var1, fill = value)) +
scale_fill_gradient(low = "yellow", high = "blue") +
theme_minimal()
# Create a heatmap with a custom color palette
ggplot(data = melt(data)) +
geom_tile(aes(x = Var2, y = Var1, fill = value)) +
scale_fill_gradientn(colors = c("#ffffcc", "#a1dab4", "#41b6c4", "#225ea8", "#253494"),
values = c(0, 0.25, 0.5, 0.75, 1)) +
theme_minimal()
# Create a heatmap with row and column labels
ggplot(data = melt(data)) +
geom_tile(aes(x = Var2, y = Var1, fill = value)) +
scale_fill_gradient(low = "white", high = "blue") +
scale_x_discrete(name = "Columns", limits = c(1, 10), labels = paste0("Col", 1:10)) +
scale_y_discrete(name = "Rows", limits = c(1, 10), labels = paste0("Row", 1:10)) +
theme_minimal()
# Create a heatmap with row and column clustering
ggplot(data = melt(data)) +
geom_tile(aes(x = Var2, y = Var1, fill = value)) +
scale_fill_gradient(low = "white", high = "blue") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
ggsave("heatmap.png", width = 6, height = 6, dpi = 300)
ggplot(data = melt(data)) +
geom_tile(aes(x = Var2, y = Var1, fill = value)) +
scale_fill_gradient(low = "white", high = "blue") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
ggsave("heatmap.png", width = 6, height = 6, dpi = 300)
"),
values = c(0, 0.25, 0.5, 0.75, 1)) +
# Create a heatmap with a custom color palette
ggplot(data = melt(data)) +
geom_tile(aes(x = Var2, y = Var1, fill = value)) +
scale_fill_gradientn(colors = c("#ffffcc", "#a1dab4", "#41b6c4", "#225ea8", "#253494"),
values = c(0, 0.25, 0.5, 0.75, 1)) +
# Create a heatmap with a custom color palette
ggplot(data = melt(data)) +
geom_tile(aes(x = Var2, y = Var1, fill = value)) +
scale_fill_gradientn(colors = c("#ffffcc", "#a1dab4", "#41b6c4", "#225ea8", "#253494"),
values = c(0, 0.25, 0.5, 0.75, 1)) +
theme_minimal()
# Create a heatmap with a custom color palette
ggplot(data = melt(data)) +
geom_tile(aes(x = Var2, y = Var1, fill = value)) +
scale_fill_gradient(colors = c("#ffffcc", "#a1dab4", "#41b6c4", "#225ea8", "#253494"),
values = c(0, 0.25, 0.5, 0.75, 1)) +
theme_minimal()
data
ggplot(data = melt(data)) +
geom_tile(aes(x = Var2, y = Var1, fill = value)) +
scale_fill_gradient(low = "white", high = "blue") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
ggsave("heatmap.png", width = 6, height = 6, dpi = 300)
library(ggplot2)
ggplot(data = melt(data)) +
geom_tile(aes(x = Var2, y = Var1, fill = value)) +
scale_fill_gradient(low = "white", high = "blue") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
library(ggplot2)
library(gganimate)
# Create a dataset with scores and timepoints
data <- data.frame(
time = 1:10,
score = rnorm(10)
)
# Create a ggplot line chart
p <- ggplot(data, aes(x = time, y = score)) +
geom_line()
# Animate the plot using gganimate
p_anim <- p +
transition_reveal(time)
# Render the animation
animate(p_anim)
install.packages("gganimate")
library(gganimate)
# Create a dataset with scores and timepoints
data <- data.frame(
time = 1:10,
score = rnorm(10)
)
# Create a ggplot line chart
p <- ggplot(data, aes(x = time, y = score)) +
geom_line()
# Animate the plot using gganimate
p_anim <- p +
transition_reveal(time)
# Render the animation
animate(p_anim)
library(plotly)
# Create a dataset with x, y, and time variables
data <- data.frame(
x = rnorm(100),
y = rnorm(100),
time = rep(1:10, each = 10)
)
# Create a plotly scatterplot
p <- plot_ly(data, x = ~x, y = ~y, frame = ~time, type = 'scatter', mode = 'markers')
# Add the frames to the plot
p_anim <- p %>%
add_frames()
library(ggplot2)
library(ggiraph)
install.packages("ggiraph")
library(ggplot2)
library(ggiraph)
# Create a dataset with mean scores and group labels
data <- data.frame(
group = c('A', 'B', 'C'),
score = rnorm(3),
time = 1:10
)
?rnorm()
# Create a dataset with mean scores and group labels
data <- data.frame(
group = c('A', 'B', 'C'),
score = rnorm(10),
time = 1:10
)
# Create a dataset with mean scores and group labels
data <- data.frame(
group = c('A', 'B', 'C'),
score = rnorm(3),
time = 1:3
)
# Create a ggplot bar chart
p <- ggplot(data, aes(x = group, y = score)) +
geom_col()
# Animate the plot using ggiraph
p_anim <- ggiraph(p) %>%
ggi_animate(frame = time, duration = 0.5)
# Render the animation
ggiraph::ggiraph_output(p_anim)
library(lordif)
install.packages("lordiff")
library(lordif)
install.packages("lordif")
library(lordif)
data(DIFdata)
model <- lrtest(CRSubtest2 ~ z3 + z4 + z5 + z6, data=DIFdata, anchor="T1")
install.packages("friends")
library(friends)
friends
