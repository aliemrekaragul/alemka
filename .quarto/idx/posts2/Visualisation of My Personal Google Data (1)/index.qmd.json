{"title":"Visualisation of My Personal Google Data (1): My Locations","markdown":{"yaml":{"title":"Visualisation of My Personal Google Data (1): My Locations","description":"This post is a part of a series that demonstrates how to gain insights from personal Google data. Its purpose is to show how to visualize the locations I visited within a time period on a map.\n","author":[{"name":"Ali Emre Karag√ºl","orcid":"0000-0002-5820-8643","email":"aliemrekaragul@gmail.com","affiliations":[{"name":"TOBB ETU- University of Economics & Technology"}]}],"date":"2022-11-16","categories":["Google Data","Maps","Data-viz"],"image":"image.png","output":{"self_contained":false,"toc":true,"toc_depth":4}},"headingText":"Introduction to the series: \"Visualisation of My Personal Google Data\"","containsRefs":false,"markdown":"\n\n```{r setup, include=FALSE}\nknitr::opts_chunk$set(echo = FALSE)\n```\n\n\nIf you give permission to Google to store your location data, they will keep them in their databases forever. You can also allow them to store it for a while and then ask them delete it. They will directly do so.\n\nWhat makes this study a fun project is its being very personal. I decided to analyze my personal data in August, 2022. Therefore, I granted many new permissions to Google along with many previously granted permissions. They keep them in various formats including .csv, .json, .mbox etc. When you query for your personal data, they provide it within a couple of days depending on the size of the data you queried.\n\nUsually, I provide the readers with the data in my posts. However, in this series, the data are very personal and so I will not.\n\n## Introduction: \"My Locations\"\n\nIn this part of the series, we will investigate my personal location data. We will visualize the spots I visited within a period of time. This way, I personally will gain insights about how boring my days are :)\n\nThe R packages that we use in this post are as follows: `rjson`, `tidyr`, `dplyr`, `purrr`, `lubridate`, `sp` and `leaflet`.\n\n```{r eval=FALSE, echo=TRUE}\n#| warning: false\n#| eval: false\n#| echo: true\n##packs for data processing\nlibrary(rjson)      # to read .JSON files.\nlibrary(tidyr)      # to process data\nlibrary(dplyr)      # to process data\nlibrary(purrr)      # to process data\nlibrary(lubridate)  # to deal with date variables\n#packs for data viz\nlibrary(sp)         # a pack for spatial objects\nlibrary(leaflet)    # map and its functions\n```\n\n```{r eval=TRUE, echo=FALSE}\n#| warning: false\n#| eval: true\n#| echo: false\n##packs for data processing\nlibrary(rjson)      # to read .JSON files.\nlibrary(tidyr)      # to process data\nlibrary(dplyr)      # to process data\nlibrary(purrr)      # to process data\nlibrary(lubridate)  # to deal with date variables\n#packs for data viz\nlibrary(sp)         # a pack for spatial objects\nlibrary(leaflet)    # map and its functions\n```\n\n## Understand the Data\n\nInside the takeout folder that I received from Google, there is a folder named \"Location History\". Inside it, \"Semantic Location History\" contains the location data based on the months and years. From that folder, I have called the locations I visited in November. Thus, we will use 2022_NOVEMBER.json file. Let's investigate the data. Start with reading the file into R environment.\n\n```{r eval=TRUE, echo=TRUE, code_folding=FALSE}\n#| warning: false\n#| eval: true\n#| echo: true\n#| code-fold: false\nmy_locations <- fromJSON(file = \"2022_NOVEMBER.json\")\n\n```\n\nThen, let's try to understand the structure of the data, how and what kind of information is stored into its cells. The list object `my_locations` contains many lists inside it. Let's try to understand each one of them one by one:\n\n```{r eval=TRUE, echo=TRUE, code_folding=FALSE}\n#| warning: false\n#| eval: true\n#| echo: true\n#| code-fold: false\nsummary(my_locations[[1]])\n```\n\nThere are many smaller lists in the first indexed list. Let's try the first one and see what's inside:\n\n```{r eval=TRUE, echo=TRUE, code_folding=FALSE}\n#| warning: false\n#| eval: true\n#| echo: true\n#| code-fold: false\nsummary(my_locations[[1]][[1]])\n```\n\nThere is a single list inside. Sad :( Let's dive one more step:\n\n```{r eval=TRUE, echo=TRUE, code_folding=FALSE}\n#| warning: false\n#| eval: true\n#| echo: true\n#| code-fold: false\nsummary(my_locations[[1]][[1]][[1]])\n```\n\nFinally, here we have several items. There is a list called `location` containing 8 items inside. There is `duration` with 2 items and `otherCandidateLocations` with 4 items. Other lists contain only one item each. Let's check these one by one:\n\n```{r eval=TRUE, echo=TRUE, code_folding=FALSE}\n#| warning: false\n#| eval: true\n#| echo: true\n#| code-fold: false\nsummary(my_locations[[1]][[1]][[1]]$location)\n```\n\n```{r eval=TRUE, echo=TRUE, code_folding=FALSE}\n#| warning: false\n#| eval: true\n#| echo: true\n#| code-fold: false\nsummary(my_locations[[1]][[1]][[1]]$duration)\n```\n\n```{r eval=TRUE, echo=TRUE, code_folding=FALSE}\n#| warning: false\n#| eval: true\n#| echo: true\n#| code-fold: false\nsummary(my_locations[[1]][[1]][[1]]$otherCandidateLocations)\n```\n\nWe can obtain much information through this investigation process. For instance, inside the `location` I can see information about the latitude, longitude, address, the confidence that I have to this place, and some other. Here, if you are following along with me, please spare some time to understand your data. Delve into them and digest as much information as you can. I will see you in the next section: data processing.\n\n## Pre-processing\n\nYou can use as many items as you want in your work. You should decide the meaningful information while understanding your data. Now let's re-define our lists as a dataframe.\n\n```{r eval=TRUE, echo=TRUE, code_folding=FALSE}\n#| warning: false\n#| eval: true\n#| echo: true\n#| code-fold: false\ndf <- map_dfr(my_locations[[\"timelineObjects\"]], as.data.frame)\nView(df)\n# there is one empty row after each entry. Let's drop them through one of the complete columns:\ndf <- drop_na(df, placeVisit.location.latitudeE7)\n```\n\nThere are many columns, some of which I won't need. Especially, I am not interested in the locations defined as \"candidate\". I will exclude them from my study. They are probably the locations that might be the place that I visited ordered by possibility. I just need the one with the highest possibility, which is tagged with `placeVisit.location.` . These locations are also defined as \"HIGH CONFIDENCE\". Let's continue the analysis with these locations, only.\n\nAlso, there are some columns with no entry. Let me exclude them with a function. Let the function be called `not_all_na`. This is a function that drops all the columns which are completely empty:\n\n```{r eval=TRUE, echo=TRUE, code_folding=FALSE}\n#| warning: false\n#| eval: true\n#| echo: true\n#| code-fold: false\nnot_all_na <- function(x)\n  any(!is.na(x))\n#use the function on the dataframe:\ndf <- df %>% select(where(not_all_na))\n```\n\nNow, I have a dataframe with 150+ columns. However, I just need the information about latitude, altitude, date and address of the locations that I visited. Let's write a query to get this data into a new dataframe:\n\n```{r eval=TRUE, echo=TRUE, code_folding=FALSE}\n#| warning: false\n#| eval: true\n#| echo: true\n#| code-fold: false\nlat <- select(df, contains(\"placeVisit.location.latitudeE7\"))\nlon <- select(df, contains(\"placeVisit.location.longitudeE7\"))\naddress <- select(df, contains(\"placeVisit.location.address\"))\ndate <- select(df, contains(\"placeVisit.duration.startTimestamp\"))\n\n```\n\nThe chunks of code above ask for columns whose names contain the extensions written in quotation marks in them. Still, this raw information isn't enough for several reasons. Firstly, `lat` and `lot` are coordinates in E7 format. With a quick research on the internet, I learned that they simply need to be divided by 10000000. Also, `date` contains day, month, year, hour, minute, second and time zone (which is in GMT+0 format) information all in the same column. They need to be handled. Let's start with the second issue (the one about `date`):\n\n```{r eval=TRUE, echo=TRUE, code_folding=FALSE}\n#| warning: false\n#| eval: true\n#| echo: true\n#| code-fold: false\n#re-name the only column:\nnames(date) <- \"Date\"\nhead(date)\n```\n\nAs can be seen above, there are two separators: One is \"T\" separating day and time info. The other is \".\" separating time and time zone info. Follow the notes in the code to grasp the process:\n\n```{r eval=TRUE, echo=TRUE, code_folding=FALSE}\n#| warning: false\n#| eval: true\n#| echo: true\n#| code-fold: false\n#divide the day and hour info from the time zone info, then drop the time zone:\ndate <-\n  separate(\n    data = date,\n    col = Date,\n    into = c(\"Date\", \"zone\"),\n    sep = \"\\\\.\"\n  )\ndate <- date[-c(2)]\n\n#Now, transform the time in local time zone which is GMT+3:\ndate$Date<-as.POSIXct(date$Date, format=\"%Y-%m-%dT%H:%M:%S\", tz=Sys.timezone())+ hours(3)\n\n#divide the day and hour info:\ndate <-\n  separate(\n    data = date,\n    col = Date,\n    into = c(\"Day\", \"Hour\"),\n    sep = \" \"\n  )\n#see the new format:\nhead(date)\n```\n\nNicely done! Now gather all the information that we need into a dataframe. Again follow along the notes in the code:\n\n```{r eval=TRUE, echo=TRUE, code_folding=FALSE}\n#| warning: false\n#| eval: true\n#| echo: true\n#| code-fold: false\ncoords <-\n  drop_na(data.frame(\n    lat = unlist(lat, use.names = FALSE) / 10000000, #divide lat and lon by 10000000 to get rid of the E7 format\n    lon = unlist(lon, use.names = FALSE) / 10000000, \n    address = unlist(address, use.names = FALSE),\n    date # we processed this before\n  ))\n```\n\nSo far, we have worked to prepare for the data visualization process. Our data is ready with the name `coords`. Let's continue with the visualization.\n\n## Data Visualization\n\nAt this point, we will visualize the locations I visited in November of 2022 on a world map. You can't be as disappointed as me when you see that I live a life between home and work. Yet, the point here is to see the process of visualization. We owe this beautiful project to the [R package leaflet](https://rstudio.github.io/leaflet/). It is actually [a javascript library](https://leafletjs.com/index.html), all its arguments are deployed into R environment too. Therefore, we can work with it. If you are still with me, I mhighly recommend you to read the documentation of the package `leaflet`. Then, follow along the notes in the code and try to understand it if you are not familiar with it.\n\n```{r eval=TRUE, echo=TRUE, code_folding=FALSE}\n#| warning: false\n#| eval: true\n#| echo: true\n#| code-fold: false\ncoordinates(coords) <- ~ lon + lat\nleaflet(coords,\n\n# formating the outer of the map:\n        width = \"800px\",\n        height = \"400px\", \n        padding = 10) %>% \n  addTiles() %>%\n\n#formating the markers on the map:\n  addCircleMarkers(\n    color = \"tomato\", #my favorite colour\n    fillOpacity = 1,\n    radius = 7,\n    stroke = FALSE,\n    \n#address pops up when you click on a marker:\n    popup = coords$address,\n\n#the date and hour shows up with a fancy personal note when you hover on a marker:\n    label =  paste0(\"I have been around here on \", coords$Day, \" at around \", coords$Hour),\n\n#formating the label that shows up when you hover:\n    labelOptions = labelOptions(\n      noHide = F,\n      direction = \"top\",\n      style = list(\n        \"color\" = \"black\",\n        \"font-family\" = \"calibri\", #I love calibri\n        \"box-shadow\" = \"3px 3px rgba(0,0,0,0.25)\",\n        \"font-size\" = \"12px\",\n        \"border-color\" = \"rgba(0,0,0,0.5)\"\n      )\n    )\n  )\n```\n\n## Conclusion\n\nWorking with your personal data gives you the opportunity to understand your own habits, likes, dislikes, and maybe future expectations. Here, you can only see my locations in November. When I worked on longer periods, I realized that I need to travel and see new places more often. Even if they are in my own city, a new place is a new vision of life.\n\nVisualizing data on spatial environments is a new challenge for me. Rather than graphs and charts, working with maps are more attractive obviously. While visualizing location data on maps, `leaflet` is an amazing, open source library. There are other options. One needs a mention here: `ggmap`. Yet, to use this package you need an API key obtained from Google. For more information about API keys, [visit here](https://developers.google.com/maps/documentation/embed/get-api-key#:~:text=Go%20to%20the%20Google%20Maps%20Platform%20%3E%20Credentials%20page.&text=On%20the%20Credentials%20page%2C%20click,Click%20Close.). As of the package, you can visit the [CRAN page of ggmap](https://cran.r-project.org/web/packages/ggmap/readme/README.html). Under the title \"Google Maps API key\", you will see the procedure to buy a personal API key. It reads as follows:\n\nGOOGLE MAPS API KEY [@ggmap]\n\n*A few years ago Google has [changed its API requirements](https://developers.google.com/maps/documentation/geocoding/usage-and-billing), and **ggmap** users are now required to register with Google. From a user's perspective, there are essentially three ramifications of this:*\n\n1.  *Users must register with Google. You can do this at [https://mapsplatform.google.com](https://mapsplatform.google.com/). While it will require a valid credit card (sorry!), there seems to be a fair bit of free use before you incur charges, and even then the charges are modest for light use.*\n\n2.  *Users must enable the APIs they intend to use. What may appear to **ggmap** users as one overarching \"Google Maps\" product, Google in fact has several services that it provides as geo-related solutions. For example, the [Maps Static API](https://developers.google.com/maps/documentation/maps-static/overview) provides map images, while the [Geocoding API](https://developers.google.com/maps/documentation/geocoding/overview) provides geocoding and reverse geocoding services. Apart from the relevant Terms of Service, generally **ggmap** users don't need to think about the different services. For example, you just need to remember that `get_googlemap()` gets maps, `geocode()` geocodes (with Google, DSK is done), etc., and **ggmap** handles the queries for you. However, you do need to enable the APIs before you use them. You'll only need to do that once, and then they'll be ready for you to use. Enabling the APIs just means clicking a few radio buttons on the Google Maps Platform web interface listed above, so it's easy.*\n\n3.  *Inside R, after loading the new version of **ggmap**, you'll need provide **ggmap** with your API key, a [hash value](https://en.wikipedia.org/wiki/Hash_function) (think string of jibberish) that authenticates you to Google's servers. This can be done on a temporary basis with `register_google(key = \"[your key]\")` or permanently using `register_google(key = \"[your key]\", write = TRUE)` (note: this will overwrite your `~/.Renviron` file by replacing/adding the relevant line). If you use the former, know that you'll need to re-do it every time you reset R.*\n\n*Your API key is private and unique to you, so be careful not to share it online, for example in a GitHub issue or saving it in a shared R script file. If you share it inadvertantly, just get on Google's website and regenerate your key - this will retire the old one. Keeping your key private is made a bit easier by **ggmap** scrubbing the key out of queries by default, so when URLs are shown in your console, they'll look something like `key=xxx`. (Read the details section of the `register_google()` documentation for a bit more info on this point.)*\n\n##### Stay tuned!\n\nThis series continues with the visualization of my Google Fit data. We will delve into my exercise habbits.\n"},"formats":{"html":{"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":{"self_contained":false,"toc":true,"toc_depth":4},"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"knitr"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../../styles.css"],"toc":true,"toc-depth":4,"include-after-body":["../../footer.html"],"output-file":"index.html"},"language":{},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.2.269","editor":"visual","theme":"literia","toc-title":"Contents","citations-hover":true,"footnotes-hover":true,"mainfont":"roboto","background":"rgb(239, 239, 239)","fontcolor":"rgb(17, 43, 60)","fontsize":"1.1em","linestretch":1.5,"title-block-banner":true,"author":["Ali Emre Karag√ºl",{"name":"Ali Emre Karag√ºl","orcid":"0000-0002-5820-8643","email":"aliemrekaragul@gmail.com","affiliations":[{"name":"TOBB ETU- University of Economics & Technology"}]}],"page-layout":"article","comments":{"utterances":{"repo":"aliemrekaragul/blog-comments"}},"title":"Visualisation of My Personal Google Data (1): My Locations","description":"This post is a part of a series that demonstrates how to gain insights from personal Google data. Its purpose is to show how to visualize the locations I visited within a time period on a map.\n","date":"2022-11-16","categories":["Google Data","Maps","Data-viz"],"image":"image.png"},"extensions":{"book":{"multiFile":true}}}}}